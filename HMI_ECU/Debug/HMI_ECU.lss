
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  00002cae  00002d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080013e  0080013e  00002e20  2**0
                  ALLOC
  3 .stab         00002a6c  00000000  00000000  00002e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011d7  00000000  00000000  0000588c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000895c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009847  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a5f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a9e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b1af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <main>
      8a:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e2       	ldi	r26, 0x2F	; 47
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e2       	ldi	r24, 0x2F	; 47
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <main>:
#include "util/delay.h"
uint8 g_password[PASSWORD_LENGTH];
uint8 g_check=PASSWORD_MISMATCH;
uint16 g_tick=0;
uint8 g_chances=0;
int main(){
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	ec 97       	sbiw	r28, 0x3c	; 60
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
    11d6:	af e5       	ldi	r26, 0x5F	; 95
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ef e5       	ldi	r30, 0x5F	; 95
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	80 68       	ori	r24, 0x80	; 128
    11e2:	8c 93       	st	X, r24
	UART_ConfigType uartconfig_Ptr={9600,DISABLED,ONE,EIGHT};
    11e4:	ce 01       	movw	r24, r28
    11e6:	8d 96       	adiw	r24, 0x2d	; 45
    11e8:	99 af       	std	Y+57, r25	; 0x39
    11ea:	88 af       	std	Y+56, r24	; 0x38
    11ec:	e7 e3       	ldi	r30, 0x37	; 55
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	fb af       	std	Y+59, r31	; 0x3b
    11f2:	ea af       	std	Y+58, r30	; 0x3a
    11f4:	f7 e0       	ldi	r31, 0x07	; 7
    11f6:	fc af       	std	Y+60, r31	; 0x3c
    11f8:	ea ad       	ldd	r30, Y+58	; 0x3a
    11fa:	fb ad       	ldd	r31, Y+59	; 0x3b
    11fc:	00 80       	ld	r0, Z
    11fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1200:	9b ad       	ldd	r25, Y+59	; 0x3b
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	9b af       	std	Y+59, r25	; 0x3b
    1206:	8a af       	std	Y+58, r24	; 0x3a
    1208:	e8 ad       	ldd	r30, Y+56	; 0x38
    120a:	f9 ad       	ldd	r31, Y+57	; 0x39
    120c:	00 82       	st	Z, r0
    120e:	88 ad       	ldd	r24, Y+56	; 0x38
    1210:	99 ad       	ldd	r25, Y+57	; 0x39
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	99 af       	std	Y+57, r25	; 0x39
    1216:	88 af       	std	Y+56, r24	; 0x38
    1218:	9c ad       	ldd	r25, Y+60	; 0x3c
    121a:	91 50       	subi	r25, 0x01	; 1
    121c:	9c af       	std	Y+60, r25	; 0x3c
    121e:	ec ad       	ldd	r30, Y+60	; 0x3c
    1220:	ee 23       	and	r30, r30
    1222:	51 f7       	brne	.-44     	; 0x11f8 <main+0x36>
	UART_init(&uartconfig_Ptr);
    1224:	ce 01       	movw	r24, r28
    1226:	8d 96       	adiw	r24, 0x2d	; 45
    1228:	0e 94 76 14 	call	0x28ec	; 0x28ec <UART_init>
	Timer0_ConfigType timerconfig_ptr={NORMAL,F_CPU_1024,0,0};
    122c:	1c aa       	std	Y+52, r1	; 0x34
    122e:	85 e0       	ldi	r24, 0x05	; 5
    1230:	8d ab       	std	Y+53, r24	; 0x35
    1232:	1e aa       	std	Y+54, r1	; 0x36
    1234:	1f aa       	std	Y+55, r1	; 0x37
	Timer0_init(&timerconfig_ptr);
    1236:	ce 01       	movw	r24, r28
    1238:	c4 96       	adiw	r24, 0x34	; 52
    123a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Timer0_init>
	Timer0_setCallBack(callBack);
    123e:	85 e8       	ldi	r24, 0x85	; 133
    1240:	9d e0       	ldi	r25, 0x0D	; 13
    1242:	0e 94 64 14 	call	0x28c8	; 0x28c8 <Timer0_setCallBack>
	LCD_init();
    1246:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_init>
	LCD_displayString("WELCOME TO SYSTEM");
    124a:	80 e6       	ldi	r24, 0x60	; 96
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e8       	ldi	r25, 0x80	; 128
    1256:	ab eb       	ldi	r26, 0xBB	; 187
    1258:	b4 e4       	ldi	r27, 0x44	; 68
    125a:	8f a3       	std	Y+39, r24	; 0x27
    125c:	98 a7       	std	Y+40, r25	; 0x28
    125e:	a9 a7       	std	Y+41, r26	; 0x29
    1260:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1262:	6f a1       	ldd	r22, Y+39	; 0x27
    1264:	78 a5       	ldd	r23, Y+40	; 0x28
    1266:	89 a5       	ldd	r24, Y+41	; 0x29
    1268:	9a a5       	ldd	r25, Y+42	; 0x2a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	4a ef       	ldi	r20, 0xFA	; 250
    1270:	54 e4       	ldi	r21, 0x44	; 68
    1272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8b a3       	std	Y+35, r24	; 0x23
    127c:	9c a3       	std	Y+36, r25	; 0x24
    127e:	ad a3       	std	Y+37, r26	; 0x25
    1280:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1282:	6b a1       	ldd	r22, Y+35	; 0x23
    1284:	7c a1       	ldd	r23, Y+36	; 0x24
    1286:	8d a1       	ldd	r24, Y+37	; 0x25
    1288:	9e a1       	ldd	r25, Y+38	; 0x26
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	2c f4       	brge	.+10     	; 0x12a4 <main+0xe2>
		__ticks = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9a a3       	std	Y+34, r25	; 0x22
    12a0:	89 a3       	std	Y+33, r24	; 0x21
    12a2:	3f c0       	rjmp	.+126    	; 0x1322 <main+0x160>
	else if (__tmp > 65535)
    12a4:	6b a1       	ldd	r22, Y+35	; 0x23
    12a6:	7c a1       	ldd	r23, Y+36	; 0x24
    12a8:	8d a1       	ldd	r24, Y+37	; 0x25
    12aa:	9e a1       	ldd	r25, Y+38	; 0x26
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	57 e4       	ldi	r21, 0x47	; 71
    12b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	4c f5       	brge	.+82     	; 0x130e <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12bc:	6f a1       	ldd	r22, Y+39	; 0x27
    12be:	78 a5       	ldd	r23, Y+40	; 0x28
    12c0:	89 a5       	ldd	r24, Y+41	; 0x29
    12c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e2       	ldi	r20, 0x20	; 32
    12ca:	51 e4       	ldi	r21, 0x41	; 65
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
    12e4:	0f c0       	rjmp	.+30     	; 0x1304 <main+0x142>
    12e6:	88 ec       	ldi	r24, 0xC8	; 200
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	98 a3       	std	Y+32, r25	; 0x20
    12ec:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12f0:	98 a1       	ldd	r25, Y+32	; 0x20
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <main+0x130>
    12f6:	98 a3       	std	Y+32, r25	; 0x20
    12f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	89 a1       	ldd	r24, Y+33	; 0x21
    12fc:	9a a1       	ldd	r25, Y+34	; 0x22
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	9a a3       	std	Y+34, r25	; 0x22
    1302:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1304:	89 a1       	ldd	r24, Y+33	; 0x21
    1306:	9a a1       	ldd	r25, Y+34	; 0x22
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	69 f7       	brne	.-38     	; 0x12e6 <main+0x124>
    130c:	14 c0       	rjmp	.+40     	; 0x1336 <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130e:	6b a1       	ldd	r22, Y+35	; 0x23
    1310:	7c a1       	ldd	r23, Y+36	; 0x24
    1312:	8d a1       	ldd	r24, Y+37	; 0x25
    1314:	9e a1       	ldd	r25, Y+38	; 0x26
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9a a3       	std	Y+34, r25	; 0x22
    1320:	89 a3       	std	Y+33, r24	; 0x21
    1322:	89 a1       	ldd	r24, Y+33	; 0x21
    1324:	9a a1       	ldd	r25, Y+34	; 0x22
    1326:	9e 8f       	std	Y+30, r25	; 0x1e
    1328:	8d 8f       	std	Y+29, r24	; 0x1d
    132a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    132c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <main+0x16c>
    1332:	9e 8f       	std	Y+30, r25	; 0x1e
    1334:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(DISPLAY_PERIOD);
	firstEntry();
    1336:	0e 94 13 0c 	call	0x1826	; 0x1826 <firstEntry>
	uint8 key;
	uint8 stateReceived;
	while(1){
		mainMenuDisplay();
    133a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <mainMenuDisplay>
		key=KEYPAD_getPressedKey();
    133e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <KEYPAD_getPressedKey>
    1342:	8c a7       	std	Y+44, r24	; 0x2c
		if(key=='+'){
    1344:	8c a5       	ldd	r24, Y+44	; 0x2c
    1346:	8b 32       	cpi	r24, 0x2B	; 43
    1348:	09 f0       	breq	.+2      	; 0x134c <main+0x18a>
    134a:	be c0       	rjmp	.+380    	; 0x14c8 <main+0x306>
			LCD_clearScreen();
    134c:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
			LCD_displayString("Enter Password");
    1350:	82 e7       	ldi	r24, 0x72	; 114
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
			passwordPrompt();
    1358:	0e 94 26 0b 	call	0x164c	; 0x164c <passwordPrompt>
			UART_sendByte(MC_READY_TO_SEND);
    135c:	80 e1       	ldi	r24, 0x10	; 16
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 f7 14 	call	0x29ee	; 0x29ee <UART_sendByte>
#if 0
	UART_sendByte(MC_READY_TO_RECEIVE);
#endif
			sendPassword(g_password);
    1364:	86 e4       	ldi	r24, 0x46	; 70
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <sendPassword>
			UART_sendByte(UNLOCK_DOOR_REQUEST);
    136c:	84 e0       	ldi	r24, 0x04	; 4
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 f7 14 	call	0x29ee	; 0x29ee <UART_sendByte>
			stateReceived=UART_recieveByte();
    1374:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_recieveByte>
    1378:	8b a7       	std	Y+43, r24	; 0x2b
			if(stateReceived==UNLOCK_DOOR){
    137a:	8b a5       	ldd	r24, Y+43	; 0x2b
    137c:	86 30       	cpi	r24, 0x06	; 6
    137e:	19 f4       	brne	.+6      	; 0x1386 <main+0x1c4>
				doorStateDisplay();
    1380:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <doorStateDisplay>
    1384:	9e c0       	rjmp	.+316    	; 0x14c2 <main+0x300>
			}
			else if(stateReceived==WRONG_MATCH){ //wrong password
    1386:	8b a5       	ldd	r24, Y+43	; 0x2b
    1388:	87 30       	cpi	r24, 0x07	; 7
    138a:	09 f0       	breq	.+2      	; 0x138e <main+0x1cc>
    138c:	9a c0       	rjmp	.+308    	; 0x14c2 <main+0x300>
				LCD_clearScreen();
    138e:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
				g_chances++;
    1392:	80 91 41 01 	lds	r24, 0x0141
    1396:	8f 5f       	subi	r24, 0xFF	; 255
    1398:	80 93 41 01 	sts	0x0141, r24
				LCD_displayString("Wrong Password,Retry");
    139c:	81 e8       	ldi	r24, 0x81	; 129
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
				if(g_chances==MAX_CHANCES){
    13a4:	80 91 41 01 	lds	r24, 0x0141
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	c9 f4       	brne	.+50     	; 0x13de <main+0x21c>
					g_tick=0;
    13ac:	10 92 40 01 	sts	0x0140, r1
    13b0:	10 92 3f 01 	sts	0x013F, r1
					LCD_clearScreen();
    13b4:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
					LCD_displayString("Hostile!!");
    13b8:	86 e9       	ldi	r24, 0x96	; 150
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
					while(g_tick<NUMBER_OF_OVERFLOWS_PER_ONE_MINUTE);
    13c0:	80 91 3f 01 	lds	r24, 0x013F
    13c4:	90 91 40 01 	lds	r25, 0x0140
    13c8:	f7 e0       	ldi	r31, 0x07	; 7
    13ca:	88 32       	cpi	r24, 0x28	; 40
    13cc:	9f 07       	cpc	r25, r31
    13ce:	c0 f3       	brcs	.-16     	; 0x13c0 <main+0x1fe>
					g_chances=0;
    13d0:	10 92 41 01 	sts	0x0141, r1
					g_tick=0;
    13d4:	10 92 40 01 	sts	0x0140, r1
    13d8:	10 92 3f 01 	sts	0x013F, r1
    13dc:	72 c0       	rjmp	.+228    	; 0x14c2 <main+0x300>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e8       	ldi	r25, 0x80	; 128
    13e2:	ab eb       	ldi	r26, 0xBB	; 187
    13e4:	b4 e4       	ldi	r27, 0x44	; 68
    13e6:	89 8f       	std	Y+25, r24	; 0x19
    13e8:	9a 8f       	std	Y+26, r25	; 0x1a
    13ea:	ab 8f       	std	Y+27, r26	; 0x1b
    13ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ee:	69 8d       	ldd	r22, Y+25	; 0x19
    13f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a ef       	ldi	r20, 0xFA	; 250
    13fc:	54 e4       	ldi	r21, 0x44	; 68
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	8d 8b       	std	Y+21, r24	; 0x15
    1408:	9e 8b       	std	Y+22, r25	; 0x16
    140a:	af 8b       	std	Y+23, r26	; 0x17
    140c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    140e:	6d 89       	ldd	r22, Y+21	; 0x15
    1410:	7e 89       	ldd	r23, Y+22	; 0x16
    1412:	8f 89       	ldd	r24, Y+23	; 0x17
    1414:	98 8d       	ldd	r25, Y+24	; 0x18
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e8       	ldi	r20, 0x80	; 128
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1422:	88 23       	and	r24, r24
    1424:	2c f4       	brge	.+10     	; 0x1430 <main+0x26e>
		__ticks = 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9c 8b       	std	Y+20, r25	; 0x14
    142c:	8b 8b       	std	Y+19, r24	; 0x13
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <main+0x2ec>
	else if (__tmp > 65535)
    1430:	6d 89       	ldd	r22, Y+21	; 0x15
    1432:	7e 89       	ldd	r23, Y+22	; 0x16
    1434:	8f 89       	ldd	r24, Y+23	; 0x17
    1436:	98 8d       	ldd	r25, Y+24	; 0x18
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	57 e4       	ldi	r21, 0x47	; 71
    1440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1444:	18 16       	cp	r1, r24
    1446:	4c f5       	brge	.+82     	; 0x149a <main+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1448:	69 8d       	ldd	r22, Y+25	; 0x19
    144a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    144c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9c 8b       	std	Y+20, r25	; 0x14
    146e:	8b 8b       	std	Y+19, r24	; 0x13
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <main+0x2ce>
    1472:	88 ec       	ldi	r24, 0xC8	; 200
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9a 8b       	std	Y+18, r25	; 0x12
    1478:	89 8b       	std	Y+17, r24	; 0x11
    147a:	89 89       	ldd	r24, Y+17	; 0x11
    147c:	9a 89       	ldd	r25, Y+18	; 0x12
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <main+0x2bc>
    1482:	9a 8b       	std	Y+18, r25	; 0x12
    1484:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1486:	8b 89       	ldd	r24, Y+19	; 0x13
    1488:	9c 89       	ldd	r25, Y+20	; 0x14
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	9c 8b       	std	Y+20, r25	; 0x14
    148e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1490:	8b 89       	ldd	r24, Y+19	; 0x13
    1492:	9c 89       	ldd	r25, Y+20	; 0x14
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	69 f7       	brne	.-38     	; 0x1472 <main+0x2b0>
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <main+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149a:	6d 89       	ldd	r22, Y+21	; 0x15
    149c:	7e 89       	ldd	r23, Y+22	; 0x16
    149e:	8f 89       	ldd	r24, Y+23	; 0x17
    14a0:	98 8d       	ldd	r25, Y+24	; 0x18
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9c 8b       	std	Y+20, r25	; 0x14
    14ac:	8b 8b       	std	Y+19, r24	; 0x13
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	98 8b       	std	Y+16, r25	; 0x10
    14b4:	8f 87       	std	Y+15, r24	; 0x0f
    14b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b8:	98 89       	ldd	r25, Y+16	; 0x10
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <main+0x2f8>
    14be:	98 8b       	std	Y+16, r25	; 0x10
    14c0:	8f 87       	std	Y+15, r24	; 0x0f
				}
				else{
				_delay_ms(DISPLAY_PERIOD);
				}
			}
			mainMenuDisplay();
    14c2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <mainMenuDisplay>
    14c6:	39 cf       	rjmp	.-398    	; 0x133a <main+0x178>
		}
		else if(key=='-'){
    14c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    14ca:	8d 32       	cpi	r24, 0x2D	; 45
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <main+0x30e>
    14ce:	35 cf       	rjmp	.-406    	; 0x133a <main+0x178>
			LCD_clearScreen();
    14d0:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
			LCD_displayString("Enter Your Password");
    14d4:	80 ea       	ldi	r24, 0xA0	; 160
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
			passwordPrompt();
    14dc:	0e 94 26 0b 	call	0x164c	; 0x164c <passwordPrompt>
			UART_sendByte(MC_READY_TO_SEND);
    14e0:	80 e1       	ldi	r24, 0x10	; 16
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 f7 14 	call	0x29ee	; 0x29ee <UART_sendByte>
#if 0
	UART_sendByte(MC_READY_TO_RECEIVE);
#endif
			sendPassword(g_password);
    14e8:	86 e4       	ldi	r24, 0x46	; 70
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <sendPassword>
			UART_sendByte(CHANGE_PASSWORD_REQUEST);
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 f7 14 	call	0x29ee	; 0x29ee <UART_sendByte>
			stateReceived=UART_recieveByte();
    14f8:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_recieveByte>
    14fc:	8b a7       	std	Y+43, r24	; 0x2b
			if(stateReceived==CHANGE_PASSWORD){
    14fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1500:	85 30       	cpi	r24, 0x05	; 5
    1502:	19 f4       	brne	.+6      	; 0x150a <main+0x348>
				firstEntry();
    1504:	0e 94 13 0c 	call	0x1826	; 0x1826 <firstEntry>
    1508:	9e c0       	rjmp	.+316    	; 0x1646 <main+0x484>
			}
			else if(stateReceived==WRONG_MATCH){
    150a:	8b a5       	ldd	r24, Y+43	; 0x2b
    150c:	87 30       	cpi	r24, 0x07	; 7
    150e:	09 f0       	breq	.+2      	; 0x1512 <main+0x350>
    1510:	9a c0       	rjmp	.+308    	; 0x1646 <main+0x484>
				LCD_clearScreen();
    1512:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
				g_chances++;
    1516:	80 91 41 01 	lds	r24, 0x0141
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	80 93 41 01 	sts	0x0141, r24
				LCD_displayString("Wrong Password,Retry");
    1520:	81 e8       	ldi	r24, 0x81	; 129
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
				if(g_chances==MAX_CHANCES){
    1528:	80 91 41 01 	lds	r24, 0x0141
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	c9 f4       	brne	.+50     	; 0x1562 <main+0x3a0>
					g_tick=0;
    1530:	10 92 40 01 	sts	0x0140, r1
    1534:	10 92 3f 01 	sts	0x013F, r1
					LCD_clearScreen();
    1538:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
					LCD_displayString("Hostile!!");
    153c:	86 e9       	ldi	r24, 0x96	; 150
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
					while(g_tick<NUMBER_OF_OVERFLOWS_PER_ONE_MINUTE);
    1544:	80 91 3f 01 	lds	r24, 0x013F
    1548:	90 91 40 01 	lds	r25, 0x0140
    154c:	27 e0       	ldi	r18, 0x07	; 7
    154e:	88 32       	cpi	r24, 0x28	; 40
    1550:	92 07       	cpc	r25, r18
    1552:	c0 f3       	brcs	.-16     	; 0x1544 <main+0x382>
					g_chances=0;
    1554:	10 92 41 01 	sts	0x0141, r1
					g_tick=0;
    1558:	10 92 40 01 	sts	0x0140, r1
    155c:	10 92 3f 01 	sts	0x013F, r1
    1560:	72 c0       	rjmp	.+228    	; 0x1646 <main+0x484>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e8       	ldi	r25, 0x80	; 128
    1566:	ab eb       	ldi	r26, 0xBB	; 187
    1568:	b4 e4       	ldi	r27, 0x44	; 68
    156a:	8b 87       	std	Y+11, r24	; 0x0b
    156c:	9c 87       	std	Y+12, r25	; 0x0c
    156e:	ad 87       	std	Y+13, r26	; 0x0d
    1570:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1572:	6b 85       	ldd	r22, Y+11	; 0x0b
    1574:	7c 85       	ldd	r23, Y+12	; 0x0c
    1576:	8d 85       	ldd	r24, Y+13	; 0x0d
    1578:	9e 85       	ldd	r25, Y+14	; 0x0e
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a ef       	ldi	r20, 0xFA	; 250
    1580:	54 e4       	ldi	r21, 0x44	; 68
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8f 83       	std	Y+7, r24	; 0x07
    158c:	98 87       	std	Y+8, r25	; 0x08
    158e:	a9 87       	std	Y+9, r26	; 0x09
    1590:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1592:	6f 81       	ldd	r22, Y+7	; 0x07
    1594:	78 85       	ldd	r23, Y+8	; 0x08
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <main+0x3f2>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
    15b2:	3f c0       	rjmp	.+126    	; 0x1632 <main+0x470>
	else if (__tmp > 65535)
    15b4:	6f 81       	ldd	r22, Y+7	; 0x07
    15b6:	78 85       	ldd	r23, Y+8	; 0x08
    15b8:	89 85       	ldd	r24, Y+9	; 0x09
    15ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	4c f5       	brge	.+82     	; 0x161e <main+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	51 e4       	ldi	r21, 0x41	; 65
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9e 83       	std	Y+6, r25	; 0x06
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <main+0x452>
    15f6:	88 ec       	ldi	r24, 0xC8	; 200
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <main+0x440>
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	69 f7       	brne	.-38     	; 0x15f6 <main+0x434>
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <main+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <main+0x47c>
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
				}
				else{
					_delay_ms(DISPLAY_PERIOD);
					}
			}
			mainMenuDisplay();
    1646:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <mainMenuDisplay>
    164a:	77 ce       	rjmp	.-786    	; 0x133a <main+0x178>

0000164c <passwordPrompt>:
/*Function responsible for:
 * 1-Function used to prompt user for password on LCD
 * 2-Accepts Input from user on keypad and store it in Global array
 *
 * */
void passwordPrompt(){
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	60 97       	sbiw	r28, 0x10	; 16
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
	LCD_moveCursor(1, 0);
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_moveCursor>
	uint8 ctr=0,key=0;
    1668:	18 8a       	std	Y+16, r1	; 0x10
    166a:	1f 86       	std	Y+15, r1	; 0x0f
	for(ctr=0;ctr<PASSWORD_LENGTH;ctr++){
    166c:	18 8a       	std	Y+16, r1	; 0x10
    166e:	93 c0       	rjmp	.+294    	; 0x1796 <passwordPrompt+0x14a>

		key=KEYPAD_getPressedKey();
    1670:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <KEYPAD_getPressedKey>
    1674:	8f 87       	std	Y+15, r24	; 0x0f

		if(key>=1&&key<=9){
    1676:	8f 85       	ldd	r24, Y+15	; 0x0f
    1678:	88 23       	and	r24, r24
    167a:	09 f4       	brne	.+2      	; 0x167e <passwordPrompt+0x32>
    167c:	86 c0       	rjmp	.+268    	; 0x178a <passwordPrompt+0x13e>
    167e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1680:	8a 30       	cpi	r24, 0x0A	; 10
    1682:	08 f0       	brcs	.+2      	; 0x1686 <passwordPrompt+0x3a>
    1684:	82 c0       	rjmp	.+260    	; 0x178a <passwordPrompt+0x13e>
			g_password[ctr]=key;
    1686:	88 89       	ldd	r24, Y+16	; 0x10
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	fc 01       	movw	r30, r24
    168e:	ea 5b       	subi	r30, 0xBA	; 186
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	8f 85       	ldd	r24, Y+15	; 0x0f
    1694:	80 83       	st	Z, r24
			LCD_moveCursor(1, ctr);
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	68 89       	ldd	r22, Y+16	; 0x10
    169a:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_moveCursor>
			LCD_displayCharacter('*');
    169e:	8a e2       	ldi	r24, 0x2A	; 42
    16a0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_displayCharacter>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	aa ef       	ldi	r26, 0xFA	; 250
    16aa:	b3 e4       	ldi	r27, 0x43	; 67
    16ac:	8b 87       	std	Y+11, r24	; 0x0b
    16ae:	9c 87       	std	Y+12, r25	; 0x0c
    16b0:	ad 87       	std	Y+13, r26	; 0x0d
    16b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a ef       	ldi	r20, 0xFA	; 250
    16c2:	54 e4       	ldi	r21, 0x44	; 68
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8f 83       	std	Y+7, r24	; 0x07
    16ce:	98 87       	std	Y+8, r25	; 0x08
    16d0:	a9 87       	std	Y+9, r26	; 0x09
    16d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <passwordPrompt+0xaa>
		__ticks = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <passwordPrompt+0x128>
	else if (__tmp > 65535)
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170a:	18 16       	cp	r1, r24
    170c:	4c f5       	brge	.+82     	; 0x1760 <passwordPrompt+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1710:	7c 85       	ldd	r23, Y+12	; 0x0c
    1712:	8d 85       	ldd	r24, Y+13	; 0x0d
    1714:	9e 85       	ldd	r25, Y+14	; 0x0e
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e2       	ldi	r20, 0x20	; 32
    171c:	51 e4       	ldi	r21, 0x41	; 65
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <passwordPrompt+0x10a>
    1738:	88 ec       	ldi	r24, 0xC8	; 200
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <passwordPrompt+0xf8>
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f7       	brne	.-38     	; 0x1738 <passwordPrompt+0xec>
    175e:	18 c0       	rjmp	.+48     	; 0x1790 <passwordPrompt+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	9e 81       	ldd	r25, Y+6	; 0x06
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <passwordPrompt+0x134>
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <passwordPrompt+0x144>
		}
		else{
			ctr--;
    178a:	88 89       	ldd	r24, Y+16	; 0x10
    178c:	81 50       	subi	r24, 0x01	; 1
    178e:	88 8b       	std	Y+16, r24	; 0x10
 *
 * */
void passwordPrompt(){
	LCD_moveCursor(1, 0);
	uint8 ctr=0,key=0;
	for(ctr=0;ctr<PASSWORD_LENGTH;ctr++){
    1790:	88 89       	ldd	r24, Y+16	; 0x10
    1792:	8f 5f       	subi	r24, 0xFF	; 255
    1794:	88 8b       	std	Y+16, r24	; 0x10
    1796:	88 89       	ldd	r24, Y+16	; 0x10
    1798:	85 30       	cpi	r24, 0x05	; 5
    179a:	08 f4       	brcc	.+2      	; 0x179e <passwordPrompt+0x152>
    179c:	69 cf       	rjmp	.-302    	; 0x1670 <passwordPrompt+0x24>
			continue;
		}
		_delay_ms(500);
	}
	/*Waiting for user to press Enter*/
	while(KEYPAD_getPressedKey()!=13);
    179e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <KEYPAD_getPressedKey>
    17a2:	8d 30       	cpi	r24, 0x0D	; 13
    17a4:	e1 f7       	brne	.-8      	; 0x179e <passwordPrompt+0x152>
}
    17a6:	60 96       	adiw	r28, 0x10	; 16
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <sendPassword>:
/*Function Responsible For:
 * 1-Getting Password in The right Format For UART Send string function.
 * 2-Send Password as a String.
 * */
void sendPassword(uint8*Pass){
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	2a 97       	sbiw	r28, 0x0a	; 10
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	9a 87       	std	Y+10, r25	; 0x0a
    17ce:	89 87       	std	Y+9, r24	; 0x09
	uint8 temp_pass[PASSWORD_LENGTH+2];
	uint8 i=0;
    17d0:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<PASSWORD_LENGTH;i++){
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	15 c0       	rjmp	.+42     	; 0x1800 <sendPassword+0x48>
		temp_pass[i]=Pass[i];
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	48 2f       	mov	r20, r24
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	89 85       	ldd	r24, Y+9	; 0x09
    17e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e6:	fc 01       	movw	r30, r24
    17e8:	e2 0f       	add	r30, r18
    17ea:	f3 1f       	adc	r31, r19
    17ec:	20 81       	ld	r18, Z
    17ee:	ce 01       	movw	r24, r28
    17f0:	02 96       	adiw	r24, 0x02	; 2
    17f2:	fc 01       	movw	r30, r24
    17f4:	e4 0f       	add	r30, r20
    17f6:	f5 1f       	adc	r31, r21
    17f8:	20 83       	st	Z, r18
 * 2-Send Password as a String.
 * */
void sendPassword(uint8*Pass){
	uint8 temp_pass[PASSWORD_LENGTH+2];
	uint8 i=0;
	for(i=0;i<PASSWORD_LENGTH;i++){
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	85 30       	cpi	r24, 0x05	; 5
    1804:	40 f3       	brcs	.-48     	; 0x17d6 <sendPassword+0x1e>
		temp_pass[i]=Pass[i];
	}
	temp_pass[5]='#';
    1806:	83 e2       	ldi	r24, 0x23	; 35
    1808:	8f 83       	std	Y+7, r24	; 0x07
	temp_pass[6]='\0';
    180a:	18 86       	std	Y+8, r1	; 0x08
	UART_sendString(temp_pass);
    180c:	ce 01       	movw	r24, r28
    180e:	02 96       	adiw	r24, 0x02	; 2
    1810:	0e 94 49 15 	call	0x2a92	; 0x2a92 <UART_sendString>
}
    1814:	2a 96       	adiw	r28, 0x0a	; 10
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <firstEntry>:
/*Function Responsible for
 * 1-Interfacing Program for setting up password and confirming it
 * 2-sends Passwords to Control ECU to make sure they are matching
 *	3-Wait For A reply From control ECU for Validity of Password Matching
 * */
void firstEntry(){
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	2e 97       	sbiw	r28, 0x0e	; 14
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	b8 c0       	rjmp	.+368    	; 0x19ac <firstEntry+0x186>
	while(g_check==PASSWORD_MISMATCH){
		LCD_clearScreen();
    183c:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
		LCD_displayString("Enter Password:");
    1840:	84 eb       	ldi	r24, 0xB4	; 180
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
		LCD_moveCursor(0, 1);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_moveCursor>
		passwordPrompt();
    1850:	0e 94 26 0b 	call	0x164c	; 0x164c <passwordPrompt>
		UART_sendByte(MC_READY_TO_SEND);
    1854:	80 e1       	ldi	r24, 0x10	; 16
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 f7 14 	call	0x29ee	; 0x29ee <UART_sendByte>
		while(UART_recieveByte()!=MC_READY_TO_RECEIVE);
    185c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_recieveByte>
    1860:	81 31       	cpi	r24, 0x11	; 17
    1862:	91 05       	cpc	r25, r1
    1864:	d9 f7       	brne	.-10     	; 0x185c <firstEntry+0x36>
		sendPassword(g_password);
    1866:	86 e4       	ldi	r24, 0x46	; 70
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <sendPassword>
		/*PROMPT FOR RE-ENTERING "confirmation For password"*/
		LCD_clearScreen();
    186e:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
		LCD_displayString("Re-Enter Password:");
    1872:	84 ec       	ldi	r24, 0xC4	; 196
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
		LCD_moveCursor(1, 0);
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_moveCursor>
		passwordPrompt();
    1882:	0e 94 26 0b 	call	0x164c	; 0x164c <passwordPrompt>
		UART_sendByte(MC_READY_TO_SEND);
    1886:	80 e1       	ldi	r24, 0x10	; 16
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <UART_sendByte>
		while(UART_recieveByte()!=MC_READY_TO_RECEIVE);
    188e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_recieveByte>
    1892:	81 31       	cpi	r24, 0x11	; 17
    1894:	91 05       	cpc	r25, r1
    1896:	d9 f7       	brne	.-10     	; 0x188e <firstEntry+0x68>
		sendPassword(g_password);
    1898:	86 e4       	ldi	r24, 0x46	; 70
    189a:	91 e0       	ldi	r25, 0x01	; 1
    189c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <sendPassword>
		while(UART_recieveByte()!=MC_READY_TO_SEND);
    18a0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_recieveByte>
    18a4:	80 31       	cpi	r24, 0x10	; 16
    18a6:	91 05       	cpc	r25, r1
    18a8:	d9 f7       	brne	.-10     	; 0x18a0 <firstEntry+0x7a>
#if 0
	UART_sendByte(MC_READY_TO_RECEIVE);
#endif
		g_check=UART_recieveByte();
    18aa:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_recieveByte>
    18ae:	80 93 3e 01 	sts	0x013E, r24
		if(g_check==PASSWORD_MISMATCH){
    18b2:	80 91 3e 01 	lds	r24, 0x013E
    18b6:	88 23       	and	r24, r24
    18b8:	09 f0       	breq	.+2      	; 0x18bc <firstEntry+0x96>
    18ba:	78 c0       	rjmp	.+240    	; 0x19ac <firstEntry+0x186>
			LCD_clearScreen();
    18bc:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
			LCD_displayString("Not Matching");
    18c0:	87 ed       	ldi	r24, 0xD7	; 215
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e8       	ldi	r25, 0x80	; 128
    18cc:	ab eb       	ldi	r26, 0xBB	; 187
    18ce:	b4 e4       	ldi	r27, 0x44	; 68
    18d0:	8b 87       	std	Y+11, r24	; 0x0b
    18d2:	9c 87       	std	Y+12, r25	; 0x0c
    18d4:	ad 87       	std	Y+13, r26	; 0x0d
    18d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18da:	7c 85       	ldd	r23, Y+12	; 0x0c
    18dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18de:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	4a ef       	ldi	r20, 0xFA	; 250
    18e6:	54 e4       	ldi	r21, 0x44	; 68
    18e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	8f 83       	std	Y+7, r24	; 0x07
    18f2:	98 87       	std	Y+8, r25	; 0x08
    18f4:	a9 87       	std	Y+9, r26	; 0x09
    18f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f8:	6f 81       	ldd	r22, Y+7	; 0x07
    18fa:	78 85       	ldd	r23, Y+8	; 0x08
    18fc:	89 85       	ldd	r24, Y+9	; 0x09
    18fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e8       	ldi	r20, 0x80	; 128
    1906:	5f e3       	ldi	r21, 0x3F	; 63
    1908:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190c:	88 23       	and	r24, r24
    190e:	2c f4       	brge	.+10     	; 0x191a <firstEntry+0xf4>
		__ticks = 1;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9e 83       	std	Y+6, r25	; 0x06
    1916:	8d 83       	std	Y+5, r24	; 0x05
    1918:	3f c0       	rjmp	.+126    	; 0x1998 <firstEntry+0x172>
	else if (__tmp > 65535)
    191a:	6f 81       	ldd	r22, Y+7	; 0x07
    191c:	78 85       	ldd	r23, Y+8	; 0x08
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	3f ef       	ldi	r19, 0xFF	; 255
    1926:	4f e7       	ldi	r20, 0x7F	; 127
    1928:	57 e4       	ldi	r21, 0x47	; 71
    192a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192e:	18 16       	cp	r1, r24
    1930:	4c f5       	brge	.+82     	; 0x1984 <firstEntry+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1932:	6b 85       	ldd	r22, Y+11	; 0x0b
    1934:	7c 85       	ldd	r23, Y+12	; 0x0c
    1936:	8d 85       	ldd	r24, Y+13	; 0x0d
    1938:	9e 85       	ldd	r25, Y+14	; 0x0e
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e2       	ldi	r20, 0x20	; 32
    1940:	51 e4       	ldi	r21, 0x41	; 65
    1942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	bc 01       	movw	r22, r24
    194c:	cd 01       	movw	r24, r26
    194e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
    195a:	0f c0       	rjmp	.+30     	; 0x197a <firstEntry+0x154>
    195c:	88 ec       	ldi	r24, 0xC8	; 200
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9c 83       	std	Y+4, r25	; 0x04
    1962:	8b 83       	std	Y+3, r24	; 0x03
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <firstEntry+0x142>
    196c:	9c 83       	std	Y+4, r25	; 0x04
    196e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	9e 83       	std	Y+6, r25	; 0x06
    1978:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197a:	8d 81       	ldd	r24, Y+5	; 0x05
    197c:	9e 81       	ldd	r25, Y+6	; 0x06
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	69 f7       	brne	.-38     	; 0x195c <firstEntry+0x136>
    1982:	14 c0       	rjmp	.+40     	; 0x19ac <firstEntry+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1984:	6f 81       	ldd	r22, Y+7	; 0x07
    1986:	78 85       	ldd	r23, Y+8	; 0x08
    1988:	89 85       	ldd	r24, Y+9	; 0x09
    198a:	9a 85       	ldd	r25, Y+10	; 0x0a
    198c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	9a 81       	ldd	r25, Y+2	; 0x02
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <firstEntry+0x17e>
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
 * 1-Interfacing Program for setting up password and confirming it
 * 2-sends Passwords to Control ECU to make sure they are matching
 *	3-Wait For A reply From control ECU for Validity of Password Matching
 * */
void firstEntry(){
	while(g_check==PASSWORD_MISMATCH){
    19ac:	80 91 3e 01 	lds	r24, 0x013E
    19b0:	88 23       	and	r24, r24
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <firstEntry+0x190>
    19b4:	43 cf       	rjmp	.-378    	; 0x183c <firstEntry+0x16>
			LCD_displayString("Not Matching");
			_delay_ms(DISPLAY_PERIOD);
		}
	}
	/*After Matching We should set check to Mismatch for Main Menu*/
	g_check=PASSWORD_MISMATCH;
    19b6:	10 92 3e 01 	sts	0x013E, r1
}
    19ba:	2e 96       	adiw	r28, 0x0e	; 14
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <mainMenuDisplay>:
/*function Responsible for displaying Main menu options*/
void mainMenuDisplay(void){
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    19d4:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
	LCD_displayString("+:Open Door");
    19d8:	84 ee       	ldi	r24, 0xE4	; 228
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "-:Reset Password");
    19e0:	20 ef       	ldi	r18, 0xF0	; 240
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	a9 01       	movw	r20, r18
    19ea:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_displayStringRowColumn>
}
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <DisplayError>:
/*Function responsible For displaying Wrong password msg when entering wrong one*/
void DisplayError(){
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	2e 97       	sbiw	r28, 0x0e	; 14
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1a08:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
	LCD_displayString("Wrong Password,Retry");
    1a0c:	81 e8       	ldi	r24, 0x81	; 129
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e8       	ldi	r25, 0x80	; 128
    1a18:	ab eb       	ldi	r26, 0xBB	; 187
    1a1a:	b4 e4       	ldi	r27, 0x44	; 68
    1a1c:	8b 87       	std	Y+11, r24	; 0x0b
    1a1e:	9c 87       	std	Y+12, r25	; 0x0c
    1a20:	ad 87       	std	Y+13, r26	; 0x0d
    1a22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4a ef       	ldi	r20, 0xFA	; 250
    1a32:	54 e4       	ldi	r21, 0x44	; 68
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	8f 83       	std	Y+7, r24	; 0x07
    1a3e:	98 87       	std	Y+8, r25	; 0x08
    1a40:	a9 87       	std	Y+9, r26	; 0x09
    1a42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a44:	6f 81       	ldd	r22, Y+7	; 0x07
    1a46:	78 85       	ldd	r23, Y+8	; 0x08
    1a48:	89 85       	ldd	r24, Y+9	; 0x09
    1a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <DisplayError+0x72>
		__ticks = 1;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	3f c0       	rjmp	.+126    	; 0x1ae4 <DisplayError+0xf0>
	else if (__tmp > 65535)
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	3f ef       	ldi	r19, 0xFF	; 255
    1a72:	4f e7       	ldi	r20, 0x7F	; 127
    1a74:	57 e4       	ldi	r21, 0x47	; 71
    1a76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	4c f5       	brge	.+82     	; 0x1ad0 <DisplayError+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e2       	ldi	r20, 0x20	; 32
    1a8c:	51 e4       	ldi	r21, 0x41	; 65
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <DisplayError+0xd2>
    1aa8:	88 ec       	ldi	r24, 0xC8	; 200
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <DisplayError+0xc0>
    1ab8:	9c 83       	std	Y+4, r25	; 0x04
    1aba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	69 f7       	brne	.-38     	; 0x1aa8 <DisplayError+0xb4>
    1ace:	14 c0       	rjmp	.+40     	; 0x1af8 <DisplayError+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <DisplayError+0xfc>
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DISPLAY_PERIOD);
}
    1af8:	2e 96       	adiw	r28, 0x0e	; 14
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <callBack>:
/*Call back Function for timer0*/
void callBack(){
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1b12:	80 91 3f 01 	lds	r24, 0x013F
    1b16:	90 91 40 01 	lds	r25, 0x0140
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	90 93 40 01 	sts	0x0140, r25
    1b20:	80 93 3f 01 	sts	0x013F, r24
}
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <doorStateDisplay>:
/*Function Responsible For:
 * 1-Opening ,closing and holding door messages display on LCD
 * 2-Manipulating g_tick variable according to Number of interrupts in TImer0
 * */
void doorStateDisplay(){
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1b32:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
	g_tick=0;
    1b36:	10 92 40 01 	sts	0x0140, r1
    1b3a:	10 92 3f 01 	sts	0x013F, r1
	LCD_displayString("Door is Opening");
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	91 e0       	ldi	r25, 0x01	; 1
    1b42:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
	while(g_tick<NUMBER_OF_OVERFLOWS_PER_15_SECOND);
    1b46:	80 91 3f 01 	lds	r24, 0x013F
    1b4a:	90 91 40 01 	lds	r25, 0x0140
    1b4e:	21 e0       	ldi	r18, 0x01	; 1
    1b50:	8a 3c       	cpi	r24, 0xCA	; 202
    1b52:	92 07       	cpc	r25, r18
    1b54:	c0 f3       	brcs	.-16     	; 0x1b46 <doorStateDisplay+0x1c>
	LCD_clearScreen();
    1b56:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
	g_tick=0;
    1b5a:	10 92 40 01 	sts	0x0140, r1
    1b5e:	10 92 3f 01 	sts	0x013F, r1
	LCD_displayString("door unlocked");
    1b62:	81 e1       	ldi	r24, 0x11	; 17
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
	while(g_tick<NUMBER_OF_OVERFLOWS_PER_THREE_SECOND);
    1b6a:	80 91 3f 01 	lds	r24, 0x013F
    1b6e:	90 91 40 01 	lds	r25, 0x0140
    1b72:	8c 35       	cpi	r24, 0x5C	; 92
    1b74:	91 05       	cpc	r25, r1
    1b76:	c8 f3       	brcs	.-14     	; 0x1b6a <doorStateDisplay+0x40>
	LCD_clearScreen();
    1b78:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
	g_tick=0;
    1b7c:	10 92 40 01 	sts	0x0140, r1
    1b80:	10 92 3f 01 	sts	0x013F, r1
	LCD_displayString("Door is closing");
    1b84:	8f e1       	ldi	r24, 0x1F	; 31
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
	while(g_tick<NUMBER_OF_OVERFLOWS_PER_15_SECOND);
    1b8c:	80 91 3f 01 	lds	r24, 0x013F
    1b90:	90 91 40 01 	lds	r25, 0x0140
    1b94:	21 e0       	ldi	r18, 0x01	; 1
    1b96:	8a 3c       	cpi	r24, 0xCA	; 202
    1b98:	92 07       	cpc	r25, r18
    1b9a:	c0 f3       	brcs	.-16     	; 0x1b8c <doorStateDisplay+0x62>
	g_tick=0;
    1b9c:	10 92 40 01 	sts	0x0140, r1
    1ba0:	10 92 3f 01 	sts	0x013F, r1
	LCD_clearScreen();
    1ba4:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_clearScreen>
}
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <KEYPAD_getPressedKey+0x6>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1bba:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1bbc:	1b 82       	std	Y+3, r1	; 0x03
    1bbe:	43 c0       	rjmp	.+134    	; 0x1c46 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	98 2f       	mov	r25, r24
    1bcc:	9c 5f       	subi	r25, 0xFC	; 252
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	69 2f       	mov	r22, r25
    1bd2:	41 e0       	ldi	r20, 0x01	; 1
    1bd4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col)); //the whole idea behind the value variable is to enable internal pull up.
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9c 01       	movw	r18, r24
    1be0:	2c 5f       	subi	r18, 0xFC	; 252
    1be2:	3f 4f       	sbci	r19, 0xFF	; 255
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <KEYPAD_getPressedKey+0x40>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	2a 95       	dec	r18
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <KEYPAD_getPressedKey+0x3c>
    1bf2:	80 95       	com	r24
    1bf4:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	69 81       	ldd	r22, Y+1	; 0x01
    1bfa:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1bfe:	1a 82       	std	Y+2, r1	; 0x02
    1c00:	1c c0       	rjmp	.+56     	; 0x1c3a <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	6a 81       	ldd	r22, Y+2	; 0x02
    1c06:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1c0a:	88 23       	and	r24, r24
    1c0c:	99 f4       	brne	.+38     	; 0x1c34 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	88 2f       	mov	r24, r24
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	89 0f       	add	r24, r25
    1c22:	8f 5f       	subi	r24, 0xFF	; 255
    1c24:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	8f 5f       	subi	r24, 0xFF	; 255
    1c38:	8a 83       	std	Y+2, r24	; 0x02
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	84 30       	cpi	r24, 0x04	; 4
    1c3e:	08 f3       	brcs	.-62     	; 0x1c02 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	8f 5f       	subi	r24, 0xFF	; 255
    1c44:	8b 83       	std	Y+3, r24	; 0x03
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	84 30       	cpi	r24, 0x04	; 4
    1c4a:	08 f4       	brcc	.+2      	; 0x1c4e <KEYPAD_getPressedKey+0xa0>
    1c4c:	b9 cf       	rjmp	.-142    	; 0x1bc0 <KEYPAD_getPressedKey+0x12>
    1c4e:	b6 cf       	rjmp	.-148    	; 0x1bbc <KEYPAD_getPressedKey+0xe>

00001c50 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	3c 83       	std	Y+4, r19	; 0x04
    1c68:	2b 83       	std	Y+3, r18	; 0x03
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	88 30       	cpi	r24, 0x08	; 8
    1c70:	91 05       	cpc	r25, r1
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c74:	70 c0       	rjmp	.+224    	; 0x1d56 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c76:	2b 81       	ldd	r18, Y+3	; 0x03
    1c78:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7a:	29 30       	cpi	r18, 0x09	; 9
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	5c f5       	brge	.+86     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	84 30       	cpi	r24, 0x04	; 4
    1c86:	91 05       	cpc	r25, r1
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c8a:	59 c0       	rjmp	.+178    	; 0x1d3e <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c90:	25 30       	cpi	r18, 0x05	; 5
    1c92:	31 05       	cpc	r19, r1
    1c94:	9c f4       	brge	.+38     	; 0x1cbc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1ca0:	48 c0       	rjmp	.+144    	; 0x1d32 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1ca2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca6:	23 30       	cpi	r18, 0x03	; 3
    1ca8:	31 05       	cpc	r19, r1
    1caa:	0c f0       	brlt	.+2      	; 0x1cae <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1cac:	45 c0       	rjmp	.+138    	; 0x1d38 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1cb8:	39 c0       	rjmp	.+114    	; 0x1d2c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1cba:	67 c0       	rjmp	.+206    	; 0x1d8a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc0:	26 30       	cpi	r18, 0x06	; 6
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1cc6:	41 c0       	rjmp	.+130    	; 0x1d4a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	87 30       	cpi	r24, 0x07	; 7
    1cce:	91 05       	cpc	r25, r1
    1cd0:	0c f0       	brlt	.+2      	; 0x1cd4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1cd2:	3e c0       	rjmp	.+124    	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1cd4:	37 c0       	rjmp	.+110    	; 0x1d44 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cda:	2c 30       	cpi	r18, 0x0C	; 12
    1cdc:	31 05       	cpc	r19, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ce0:	46 c0       	rjmp	.+140    	; 0x1d6e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	8d 30       	cpi	r24, 0x0D	; 13
    1ce8:	91 05       	cpc	r25, r1
    1cea:	5c f4       	brge	.+22     	; 0x1d02 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1cec:	2b 81       	ldd	r18, Y+3	; 0x03
    1cee:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf0:	2a 30       	cpi	r18, 0x0A	; 10
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	b1 f1       	breq	.+108    	; 0x1d62 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	8b 30       	cpi	r24, 0x0B	; 11
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	a4 f5       	brge	.+104    	; 0x1d68 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1d00:	2d c0       	rjmp	.+90     	; 0x1d5c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1d02:	2b 81       	ldd	r18, Y+3	; 0x03
    1d04:	3c 81       	ldd	r19, Y+4	; 0x04
    1d06:	2e 30       	cpi	r18, 0x0E	; 14
    1d08:	31 05       	cpc	r19, r1
    1d0a:	b9 f1       	breq	.+110    	; 0x1d7a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d10:	8e 30       	cpi	r24, 0x0E	; 14
    1d12:	91 05       	cpc	r25, r1
    1d14:	7c f1       	brlt	.+94     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1d16:	2b 81       	ldd	r18, Y+3	; 0x03
    1d18:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1a:	2f 30       	cpi	r18, 0x0F	; 15
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	79 f1       	breq	.+94     	; 0x1d7e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	80 31       	cpi	r24, 0x10	; 16
    1d26:	91 05       	cpc	r25, r1
    1d28:	69 f1       	breq	.+90     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1d2a:	2f c0       	rjmp	.+94     	; 0x1d8a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1d2c:	87 e0       	ldi	r24, 0x07	; 7
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	2e c0       	rjmp	.+92     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1d32:	88 e0       	ldi	r24, 0x08	; 8
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	2b c0       	rjmp	.+86     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1d38:	89 e0       	ldi	r24, 0x09	; 9
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	28 c0       	rjmp	.+80     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d3e:	85 e2       	ldi	r24, 0x25	; 37
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	25 c0       	rjmp	.+74     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1d44:	84 e0       	ldi	r24, 0x04	; 4
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	22 c0       	rjmp	.+68     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1d4a:	85 e0       	ldi	r24, 0x05	; 5
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	1f c0       	rjmp	.+62     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1d50:	86 e0       	ldi	r24, 0x06	; 6
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	1c c0       	rjmp	.+56     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d56:	8a e2       	ldi	r24, 0x2A	; 42
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	19 c0       	rjmp	.+50     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	16 c0       	rjmp	.+44     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	13 c0       	rjmp	.+38     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1d68:	83 e0       	ldi	r24, 0x03	; 3
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	10 c0       	rjmp	.+32     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d6e:	8d e2       	ldi	r24, 0x2D	; 45
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	0d c0       	rjmp	.+26     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d74:	8d e0       	ldi	r24, 0x0D	; 13
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	0a c0       	rjmp	.+20     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1d7a:	19 82       	std	Y+1, r1	; 0x01
    1d7c:	08 c0       	rjmp	.+16     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d7e:	8d e3       	ldi	r24, 0x3D	; 61
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	05 c0       	rjmp	.+10     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d84:	8b e2       	ldi	r24, 0x2B	; 43
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button; // to prevent multiple returns
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	62 e0       	ldi	r22, 0x02	; 2
    1dbe:	41 e0       	ldi	r20, 0x01	; 1
    1dc0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	6f ef       	ldi	r22, 0xFF	; 255
    1dc8:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1dcc:	88 e3       	ldi	r24, 0x38	; 56
    1dce:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1dd2:	8c e0       	ldi	r24, 0x0C	; 12
    1dd4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>
}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	e9 97       	sbiw	r28, 0x39	; 57
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	bf e3       	ldi	r27, 0x3F	; 63
    1e16:	8d ab       	std	Y+53, r24	; 0x35
    1e18:	9e ab       	std	Y+54, r25	; 0x36
    1e1a:	af ab       	std	Y+55, r26	; 0x37
    1e1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e20:	7e a9       	ldd	r23, Y+54	; 0x36
    1e22:	8f a9       	ldd	r24, Y+55	; 0x37
    1e24:	98 ad       	ldd	r25, Y+56	; 0x38
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4a ef       	ldi	r20, 0xFA	; 250
    1e2c:	54 e4       	ldi	r21, 0x44	; 68
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	89 ab       	std	Y+49, r24	; 0x31
    1e38:	9a ab       	std	Y+50, r25	; 0x32
    1e3a:	ab ab       	std	Y+51, r26	; 0x33
    1e3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e40:	7a a9       	ldd	r23, Y+50	; 0x32
    1e42:	8b a9       	ldd	r24, Y+51	; 0x33
    1e44:	9c a9       	ldd	r25, Y+52	; 0x34
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	98 ab       	std	Y+48, r25	; 0x30
    1e5c:	8f a7       	std	Y+47, r24	; 0x2f
    1e5e:	3f c0       	rjmp	.+126    	; 0x1ede <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1e60:	69 a9       	ldd	r22, Y+49	; 0x31
    1e62:	7a a9       	ldd	r23, Y+50	; 0x32
    1e64:	8b a9       	ldd	r24, Y+51	; 0x33
    1e66:	9c a9       	ldd	r25, Y+52	; 0x34
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	4c f5       	brge	.+82     	; 0x1eca <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	6d a9       	ldd	r22, Y+53	; 0x35
    1e7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	98 ab       	std	Y+48, r25	; 0x30
    1e9e:	8f a7       	std	Y+47, r24	; 0x2f
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <LCD_sendCommand+0xdc>
    1ea2:	88 ec       	ldi	r24, 0xC8	; 200
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9e a7       	std	Y+46, r25	; 0x2e
    1ea8:	8d a7       	std	Y+45, r24	; 0x2d
    1eaa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eac:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_sendCommand+0xca>
    1eb2:	9e a7       	std	Y+46, r25	; 0x2e
    1eb4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	98 ab       	std	Y+48, r25	; 0x30
    1ebe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <LCD_sendCommand+0xbe>
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	69 a9       	ldd	r22, Y+49	; 0x31
    1ecc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ece:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	98 ab       	std	Y+48, r25	; 0x30
    1edc:	8f a7       	std	Y+47, r24	; 0x2f
    1ede:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee2:	9c a7       	std	Y+44, r25	; 0x2c
    1ee4:	8b a7       	std	Y+43, r24	; 0x2b
    1ee6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_sendCommand+0x106>
    1eee:	9c a7       	std	Y+44, r25	; 0x2c
    1ef0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	62 e0       	ldi	r22, 0x02	; 2
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e8       	ldi	r26, 0x80	; 128
    1f02:	bf e3       	ldi	r27, 0x3F	; 63
    1f04:	8f a3       	std	Y+39, r24	; 0x27
    1f06:	98 a7       	std	Y+40, r25	; 0x28
    1f08:	a9 a7       	std	Y+41, r26	; 0x29
    1f0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f10:	89 a5       	ldd	r24, Y+41	; 0x29
    1f12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	4a ef       	ldi	r20, 0xFA	; 250
    1f1a:	54 e4       	ldi	r21, 0x44	; 68
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	8b a3       	std	Y+35, r24	; 0x23
    1f26:	9c a3       	std	Y+36, r25	; 0x24
    1f28:	ad a3       	std	Y+37, r26	; 0x25
    1f2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f30:	8d a1       	ldd	r24, Y+37	; 0x25
    1f32:	9e a1       	ldd	r25, Y+38	; 0x26
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <LCD_sendCommand+0x16a>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9a a3       	std	Y+34, r25	; 0x22
    1f4a:	89 a3       	std	Y+33, r24	; 0x21
    1f4c:	3f c0       	rjmp	.+126    	; 0x1fcc <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1f4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f50:	7c a1       	ldd	r23, Y+36	; 0x24
    1f52:	8d a1       	ldd	r24, Y+37	; 0x25
    1f54:	9e a1       	ldd	r25, Y+38	; 0x26
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	4c f5       	brge	.+82     	; 0x1fb8 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	6f a1       	ldd	r22, Y+39	; 0x27
    1f68:	78 a5       	ldd	r23, Y+40	; 0x28
    1f6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9a a3       	std	Y+34, r25	; 0x22
    1f8c:	89 a3       	std	Y+33, r24	; 0x21
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <LCD_sendCommand+0x1ca>
    1f90:	88 ec       	ldi	r24, 0xC8	; 200
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	98 a3       	std	Y+32, r25	; 0x20
    1f96:	8f 8f       	std	Y+31, r24	; 0x1f
    1f98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f9a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_sendCommand+0x1b8>
    1fa0:	98 a3       	std	Y+32, r25	; 0x20
    1fa2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	9a a3       	std	Y+34, r25	; 0x22
    1fac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	69 f7       	brne	.-38     	; 0x1f90 <LCD_sendCommand+0x1ac>
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fba:	7c a1       	ldd	r23, Y+36	; 0x24
    1fbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9a a3       	std	Y+34, r25	; 0x22
    1fca:	89 a3       	std	Y+33, r24	; 0x21
    1fcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1fce:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    1fd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_sendCommand+0x1f4>
    1fdc:	9e 8f       	std	Y+30, r25	; 0x1e
    1fde:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	69 ad       	ldd	r22, Y+57	; 0x39
    1fe4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	a0 e8       	ldi	r26, 0x80	; 128
    1fee:	bf e3       	ldi	r27, 0x3F	; 63
    1ff0:	89 8f       	std	Y+25, r24	; 0x19
    1ff2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ff6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff8:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4a ef       	ldi	r20, 0xFA	; 250
    2006:	54 e4       	ldi	r21, 0x44	; 68
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	8d 8b       	std	Y+21, r24	; 0x15
    2012:	9e 8b       	std	Y+22, r25	; 0x16
    2014:	af 8b       	std	Y+23, r26	; 0x17
    2016:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2018:	6d 89       	ldd	r22, Y+21	; 0x15
    201a:	7e 89       	ldd	r23, Y+22	; 0x16
    201c:	8f 89       	ldd	r24, Y+23	; 0x17
    201e:	98 8d       	ldd	r25, Y+24	; 0x18
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	2c f4       	brge	.+10     	; 0x203a <LCD_sendCommand+0x256>
		__ticks = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9c 8b       	std	Y+20, r25	; 0x14
    2036:	8b 8b       	std	Y+19, r24	; 0x13
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    203a:	6d 89       	ldd	r22, Y+21	; 0x15
    203c:	7e 89       	ldd	r23, Y+22	; 0x16
    203e:	8f 89       	ldd	r24, Y+23	; 0x17
    2040:	98 8d       	ldd	r25, Y+24	; 0x18
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	3f ef       	ldi	r19, 0xFF	; 255
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	57 e4       	ldi	r21, 0x47	; 71
    204a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	4c f5       	brge	.+82     	; 0x20a4 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2052:	69 8d       	ldd	r22, Y+25	; 0x19
    2054:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2056:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2058:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9c 8b       	std	Y+20, r25	; 0x14
    2078:	8b 8b       	std	Y+19, r24	; 0x13
    207a:	0f c0       	rjmp	.+30     	; 0x209a <LCD_sendCommand+0x2b6>
    207c:	88 ec       	ldi	r24, 0xC8	; 200
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9a 8b       	std	Y+18, r25	; 0x12
    2082:	89 8b       	std	Y+17, r24	; 0x11
    2084:	89 89       	ldd	r24, Y+17	; 0x11
    2086:	9a 89       	ldd	r25, Y+18	; 0x12
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_sendCommand+0x2a4>
    208c:	9a 8b       	std	Y+18, r25	; 0x12
    208e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	8b 89       	ldd	r24, Y+19	; 0x13
    209c:	9c 89       	ldd	r25, Y+20	; 0x14
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	69 f7       	brne	.-38     	; 0x207c <LCD_sendCommand+0x298>
    20a2:	14 c0       	rjmp	.+40     	; 0x20cc <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	6d 89       	ldd	r22, Y+21	; 0x15
    20a6:	7e 89       	ldd	r23, Y+22	; 0x16
    20a8:	8f 89       	ldd	r24, Y+23	; 0x17
    20aa:	98 8d       	ldd	r25, Y+24	; 0x18
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9c 8b       	std	Y+20, r25	; 0x14
    20b6:	8b 8b       	std	Y+19, r24	; 0x13
    20b8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ba:	9c 89       	ldd	r25, Y+20	; 0x14
    20bc:	98 8b       	std	Y+16, r25	; 0x10
    20be:	8f 87       	std	Y+15, r24	; 0x0f
    20c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c2:	98 89       	ldd	r25, Y+16	; 0x10
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <LCD_sendCommand+0x2e0>
    20c8:	98 8b       	std	Y+16, r25	; 0x10
    20ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	62 e0       	ldi	r22, 0x02	; 2
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a0 e8       	ldi	r26, 0x80	; 128
    20dc:	bf e3       	ldi	r27, 0x3F	; 63
    20de:	8b 87       	std	Y+11, r24	; 0x0b
    20e0:	9c 87       	std	Y+12, r25	; 0x0c
    20e2:	ad 87       	std	Y+13, r26	; 0x0d
    20e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	4a ef       	ldi	r20, 0xFA	; 250
    20f4:	54 e4       	ldi	r21, 0x44	; 68
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	8f 83       	std	Y+7, r24	; 0x07
    2100:	98 87       	std	Y+8, r25	; 0x08
    2102:	a9 87       	std	Y+9, r26	; 0x09
    2104:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5f e3       	ldi	r21, 0x3F	; 63
    2116:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    211a:	88 23       	and	r24, r24
    211c:	2c f4       	brge	.+10     	; 0x2128 <LCD_sendCommand+0x344>
		__ticks = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	3f c0       	rjmp	.+126    	; 0x21a6 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	3f ef       	ldi	r19, 0xFF	; 255
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	57 e4       	ldi	r21, 0x47	; 71
    2138:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	4c f5       	brge	.+82     	; 0x2192 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2140:	6b 85       	ldd	r22, Y+11	; 0x0b
    2142:	7c 85       	ldd	r23, Y+12	; 0x0c
    2144:	8d 85       	ldd	r24, Y+13	; 0x0d
    2146:	9e 85       	ldd	r25, Y+14	; 0x0e
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e2       	ldi	r20, 0x20	; 32
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <LCD_sendCommand+0x3a4>
    216a:	88 ec       	ldi	r24, 0xC8	; 200
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9c 83       	std	Y+4, r25	; 0x04
    2170:	8b 83       	std	Y+3, r24	; 0x03
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_sendCommand+0x392>
    217a:	9c 83       	std	Y+4, r25	; 0x04
    217c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	69 f7       	brne	.-38     	; 0x216a <LCD_sendCommand+0x386>
    2190:	14 c0       	rjmp	.+40     	; 0x21ba <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_sendCommand+0x3ce>
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    21ba:	e9 96       	adiw	r28, 0x39	; 57
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	e9 97       	sbiw	r28, 0x39	; 57
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	a0 e8       	ldi	r26, 0x80	; 128
    21fc:	bf e3       	ldi	r27, 0x3F	; 63
    21fe:	8d ab       	std	Y+53, r24	; 0x35
    2200:	9e ab       	std	Y+54, r25	; 0x36
    2202:	af ab       	std	Y+55, r26	; 0x37
    2204:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2206:	6d a9       	ldd	r22, Y+53	; 0x35
    2208:	7e a9       	ldd	r23, Y+54	; 0x36
    220a:	8f a9       	ldd	r24, Y+55	; 0x37
    220c:	98 ad       	ldd	r25, Y+56	; 0x38
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a ef       	ldi	r20, 0xFA	; 250
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	89 ab       	std	Y+49, r24	; 0x31
    2220:	9a ab       	std	Y+50, r25	; 0x32
    2222:	ab ab       	std	Y+51, r26	; 0x33
    2224:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2226:	69 a9       	ldd	r22, Y+49	; 0x31
    2228:	7a a9       	ldd	r23, Y+50	; 0x32
    222a:	8b a9       	ldd	r24, Y+51	; 0x33
    222c:	9c a9       	ldd	r25, Y+52	; 0x34
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e8       	ldi	r20, 0x80	; 128
    2234:	5f e3       	ldi	r21, 0x3F	; 63
    2236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223a:	88 23       	and	r24, r24
    223c:	2c f4       	brge	.+10     	; 0x2248 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	98 ab       	std	Y+48, r25	; 0x30
    2244:	8f a7       	std	Y+47, r24	; 0x2f
    2246:	3f c0       	rjmp	.+126    	; 0x22c6 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2248:	69 a9       	ldd	r22, Y+49	; 0x31
    224a:	7a a9       	ldd	r23, Y+50	; 0x32
    224c:	8b a9       	ldd	r24, Y+51	; 0x33
    224e:	9c a9       	ldd	r25, Y+52	; 0x34
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	3f ef       	ldi	r19, 0xFF	; 255
    2254:	4f e7       	ldi	r20, 0x7F	; 127
    2256:	57 e4       	ldi	r21, 0x47	; 71
    2258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225c:	18 16       	cp	r1, r24
    225e:	4c f5       	brge	.+82     	; 0x22b2 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2260:	6d a9       	ldd	r22, Y+53	; 0x35
    2262:	7e a9       	ldd	r23, Y+54	; 0x36
    2264:	8f a9       	ldd	r24, Y+55	; 0x37
    2266:	98 ad       	ldd	r25, Y+56	; 0x38
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e2       	ldi	r20, 0x20	; 32
    226e:	51 e4       	ldi	r21, 0x41	; 65
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	98 ab       	std	Y+48, r25	; 0x30
    2286:	8f a7       	std	Y+47, r24	; 0x2f
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <LCD_displayCharacter+0xdc>
    228a:	88 ec       	ldi	r24, 0xC8	; 200
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9e a7       	std	Y+46, r25	; 0x2e
    2290:	8d a7       	std	Y+45, r24	; 0x2d
    2292:	8d a5       	ldd	r24, Y+45	; 0x2d
    2294:	9e a5       	ldd	r25, Y+46	; 0x2e
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <LCD_displayCharacter+0xca>
    229a:	9e a7       	std	Y+46, r25	; 0x2e
    229c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229e:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a0:	98 a9       	ldd	r25, Y+48	; 0x30
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	98 ab       	std	Y+48, r25	; 0x30
    22a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22aa:	98 a9       	ldd	r25, Y+48	; 0x30
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	69 f7       	brne	.-38     	; 0x228a <LCD_displayCharacter+0xbe>
    22b0:	14 c0       	rjmp	.+40     	; 0x22da <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b2:	69 a9       	ldd	r22, Y+49	; 0x31
    22b4:	7a a9       	ldd	r23, Y+50	; 0x32
    22b6:	8b a9       	ldd	r24, Y+51	; 0x33
    22b8:	9c a9       	ldd	r25, Y+52	; 0x34
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	98 ab       	std	Y+48, r25	; 0x30
    22c4:	8f a7       	std	Y+47, r24	; 0x2f
    22c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ca:	9c a7       	std	Y+44, r25	; 0x2c
    22cc:	8b a7       	std	Y+43, r24	; 0x2b
    22ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <LCD_displayCharacter+0x106>
    22d6:	9c a7       	std	Y+44, r25	; 0x2c
    22d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	62 e0       	ldi	r22, 0x02	; 2
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 e8       	ldi	r26, 0x80	; 128
    22ea:	bf e3       	ldi	r27, 0x3F	; 63
    22ec:	8f a3       	std	Y+39, r24	; 0x27
    22ee:	98 a7       	std	Y+40, r25	; 0x28
    22f0:	a9 a7       	std	Y+41, r26	; 0x29
    22f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	6f a1       	ldd	r22, Y+39	; 0x27
    22f6:	78 a5       	ldd	r23, Y+40	; 0x28
    22f8:	89 a5       	ldd	r24, Y+41	; 0x29
    22fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8b a3       	std	Y+35, r24	; 0x23
    230e:	9c a3       	std	Y+36, r25	; 0x24
    2310:	ad a3       	std	Y+37, r26	; 0x25
    2312:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2314:	6b a1       	ldd	r22, Y+35	; 0x23
    2316:	7c a1       	ldd	r23, Y+36	; 0x24
    2318:	8d a1       	ldd	r24, Y+37	; 0x25
    231a:	9e a1       	ldd	r25, Y+38	; 0x26
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9a a3       	std	Y+34, r25	; 0x22
    2332:	89 a3       	std	Y+33, r24	; 0x21
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	6f a1       	ldd	r22, Y+39	; 0x27
    2350:	78 a5       	ldd	r23, Y+40	; 0x28
    2352:	89 a5       	ldd	r24, Y+41	; 0x29
    2354:	9a a5       	ldd	r25, Y+42	; 0x2a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9a a3       	std	Y+34, r25	; 0x22
    2374:	89 a3       	std	Y+33, r24	; 0x21
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <LCD_displayCharacter+0x1ca>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	98 a3       	std	Y+32, r25	; 0x20
    237e:	8f 8f       	std	Y+31, r24	; 0x1f
    2380:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2382:	98 a1       	ldd	r25, Y+32	; 0x20
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LCD_displayCharacter+0x1b8>
    2388:	98 a3       	std	Y+32, r25	; 0x20
    238a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	89 a1       	ldd	r24, Y+33	; 0x21
    238e:	9a a1       	ldd	r25, Y+34	; 0x22
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9a a3       	std	Y+34, r25	; 0x22
    2394:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	89 a1       	ldd	r24, Y+33	; 0x21
    2398:	9a a1       	ldd	r25, Y+34	; 0x22
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <LCD_displayCharacter+0x1ac>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6b a1       	ldd	r22, Y+35	; 0x23
    23a2:	7c a1       	ldd	r23, Y+36	; 0x24
    23a4:	8d a1       	ldd	r24, Y+37	; 0x25
    23a6:	9e a1       	ldd	r25, Y+38	; 0x26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9a a3       	std	Y+34, r25	; 0x22
    23b2:	89 a3       	std	Y+33, r24	; 0x21
    23b4:	89 a1       	ldd	r24, Y+33	; 0x21
    23b6:	9a a1       	ldd	r25, Y+34	; 0x22
    23b8:	9e 8f       	std	Y+30, r25	; 0x1e
    23ba:	8d 8f       	std	Y+29, r24	; 0x1d
    23bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_displayCharacter+0x1f4>
    23c4:	9e 8f       	std	Y+30, r25	; 0x1e
    23c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	69 ad       	ldd	r22, Y+57	; 0x39
    23cc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a0 e8       	ldi	r26, 0x80	; 128
    23d6:	bf e3       	ldi	r27, 0x3F	; 63
    23d8:	89 8f       	std	Y+25, r24	; 0x19
    23da:	9a 8f       	std	Y+26, r25	; 0x1a
    23dc:	ab 8f       	std	Y+27, r26	; 0x1b
    23de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e0:	69 8d       	ldd	r22, Y+25	; 0x19
    23e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a ef       	ldi	r20, 0xFA	; 250
    23ee:	54 e4       	ldi	r21, 0x44	; 68
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8d 8b       	std	Y+21, r24	; 0x15
    23fa:	9e 8b       	std	Y+22, r25	; 0x16
    23fc:	af 8b       	std	Y+23, r26	; 0x17
    23fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2400:	6d 89       	ldd	r22, Y+21	; 0x15
    2402:	7e 89       	ldd	r23, Y+22	; 0x16
    2404:	8f 89       	ldd	r24, Y+23	; 0x17
    2406:	98 8d       	ldd	r25, Y+24	; 0x18
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	2c f4       	brge	.+10     	; 0x2422 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	3f c0       	rjmp	.+126    	; 0x24a0 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2422:	6d 89       	ldd	r22, Y+21	; 0x15
    2424:	7e 89       	ldd	r23, Y+22	; 0x16
    2426:	8f 89       	ldd	r24, Y+23	; 0x17
    2428:	98 8d       	ldd	r25, Y+24	; 0x18
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	4c f5       	brge	.+82     	; 0x248c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	69 8d       	ldd	r22, Y+25	; 0x19
    243c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    243e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2440:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	8b 8b       	std	Y+19, r24	; 0x13
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <LCD_displayCharacter+0x2b6>
    2464:	88 ec       	ldi	r24, 0xC8	; 200
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9a 8b       	std	Y+18, r25	; 0x12
    246a:	89 8b       	std	Y+17, r24	; 0x11
    246c:	89 89       	ldd	r24, Y+17	; 0x11
    246e:	9a 89       	ldd	r25, Y+18	; 0x12
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_displayCharacter+0x2a4>
    2474:	9a 8b       	std	Y+18, r25	; 0x12
    2476:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	8b 89       	ldd	r24, Y+19	; 0x13
    247a:	9c 89       	ldd	r25, Y+20	; 0x14
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	9c 8b       	std	Y+20, r25	; 0x14
    2480:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2482:	8b 89       	ldd	r24, Y+19	; 0x13
    2484:	9c 89       	ldd	r25, Y+20	; 0x14
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f7       	brne	.-38     	; 0x2464 <LCD_displayCharacter+0x298>
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	6d 89       	ldd	r22, Y+21	; 0x15
    248e:	7e 89       	ldd	r23, Y+22	; 0x16
    2490:	8f 89       	ldd	r24, Y+23	; 0x17
    2492:	98 8d       	ldd	r25, Y+24	; 0x18
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9c 8b       	std	Y+20, r25	; 0x14
    249e:	8b 8b       	std	Y+19, r24	; 0x13
    24a0:	8b 89       	ldd	r24, Y+19	; 0x13
    24a2:	9c 89       	ldd	r25, Y+20	; 0x14
    24a4:	98 8b       	std	Y+16, r25	; 0x10
    24a6:	8f 87       	std	Y+15, r24	; 0x0f
    24a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24aa:	98 89       	ldd	r25, Y+16	; 0x10
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_displayCharacter+0x2e0>
    24b0:	98 8b       	std	Y+16, r25	; 0x10
    24b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	62 e0       	ldi	r22, 0x02	; 2
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e8       	ldi	r26, 0x80	; 128
    24c4:	bf e3       	ldi	r27, 0x3F	; 63
    24c6:	8b 87       	std	Y+11, r24	; 0x0b
    24c8:	9c 87       	std	Y+12, r25	; 0x0c
    24ca:	ad 87       	std	Y+13, r26	; 0x0d
    24cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a ef       	ldi	r20, 0xFA	; 250
    24dc:	54 e4       	ldi	r21, 0x44	; 68
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8f 83       	std	Y+7, r24	; 0x07
    24e8:	98 87       	std	Y+8, r25	; 0x08
    24ea:	a9 87       	std	Y+9, r26	; 0x09
    24ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	3f c0       	rjmp	.+126    	; 0x258e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	4c f5       	brge	.+82     	; 0x257a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	6b 85       	ldd	r22, Y+11	; 0x0b
    252a:	7c 85       	ldd	r23, Y+12	; 0x0c
    252c:	8d 85       	ldd	r24, Y+13	; 0x0d
    252e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <LCD_displayCharacter+0x3a4>
    2552:	88 ec       	ldi	r24, 0xC8	; 200
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9c 83       	std	Y+4, r25	; 0x04
    2558:	8b 83       	std	Y+3, r24	; 0x03
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_displayCharacter+0x392>
    2562:	9c 83       	std	Y+4, r25	; 0x04
    2564:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	9e 83       	std	Y+6, r25	; 0x06
    256e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	69 f7       	brne	.-38     	; 0x2552 <LCD_displayCharacter+0x386>
    2578:	14 c0       	rjmp	.+40     	; 0x25a2 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	9a 83       	std	Y+2, r25	; 0x02
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_displayCharacter+0x3ce>
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    25a2:	e9 96       	adiw	r28, 0x39	; 57
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <LCD_displayString+0x6>
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	9b 83       	std	Y+3, r25	; 0x03
    25c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25c4:	19 82       	std	Y+1, r1	; 0x01
    25c6:	0e c0       	rjmp	.+28     	; 0x25e4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	9b 81       	ldd	r25, Y+3	; 0x03
    25d2:	fc 01       	movw	r30, r24
    25d4:	e2 0f       	add	r30, r18
    25d6:	f3 1f       	adc	r31, r19
    25d8:	80 81       	ld	r24, Z
    25da:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_displayCharacter>
		i++;
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	fc 01       	movw	r30, r24
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	80 81       	ld	r24, Z
    25f6:	88 23       	and	r24, r24
    25f8:	39 f7       	brne	.-50     	; 0x25c8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <LCD_moveCursor+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <LCD_moveCursor+0x8>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	8a 83       	std	Y+2, r24	; 0x02
    2616:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	3d 83       	std	Y+5, r19	; 0x05
    2620:	2c 83       	std	Y+4, r18	; 0x04
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	91 05       	cpc	r25, r1
    262a:	c1 f0       	breq	.+48     	; 0x265c <LCD_moveCursor+0x56>
    262c:	2c 81       	ldd	r18, Y+4	; 0x04
    262e:	3d 81       	ldd	r19, Y+5	; 0x05
    2630:	22 30       	cpi	r18, 0x02	; 2
    2632:	31 05       	cpc	r19, r1
    2634:	2c f4       	brge	.+10     	; 0x2640 <LCD_moveCursor+0x3a>
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	61 f0       	breq	.+24     	; 0x2656 <LCD_moveCursor+0x50>
    263e:	19 c0       	rjmp	.+50     	; 0x2672 <LCD_moveCursor+0x6c>
    2640:	2c 81       	ldd	r18, Y+4	; 0x04
    2642:	3d 81       	ldd	r19, Y+5	; 0x05
    2644:	22 30       	cpi	r18, 0x02	; 2
    2646:	31 05       	cpc	r19, r1
    2648:	69 f0       	breq	.+26     	; 0x2664 <LCD_moveCursor+0x5e>
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	9d 81       	ldd	r25, Y+5	; 0x05
    264e:	83 30       	cpi	r24, 0x03	; 3
    2650:	91 05       	cpc	r25, r1
    2652:	61 f0       	breq	.+24     	; 0x266c <LCD_moveCursor+0x66>
    2654:	0e c0       	rjmp	.+28     	; 0x2672 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	0b c0       	rjmp	.+22     	; 0x2672 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	80 5c       	subi	r24, 0xC0	; 192
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	07 c0       	rjmp	.+14     	; 0x2672 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	80 5f       	subi	r24, 0xF0	; 240
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	80 5b       	subi	r24, 0xB0	; 176
    2670:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	80 68       	ori	r24, 0x80	; 128
    2676:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>
}
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	00 d0       	rcall	.+0      	; 0x2690 <LCD_displayStringRowColumn+0x6>
    2690:	00 d0       	rcall	.+0      	; 0x2692 <LCD_displayStringRowColumn+0x8>
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	89 83       	std	Y+1, r24	; 0x01
    2698:	6a 83       	std	Y+2, r22	; 0x02
    269a:	5c 83       	std	Y+4, r21	; 0x04
    269c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	6a 81       	ldd	r22, Y+2	; 0x02
    26a2:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
}
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	62 97       	sbiw	r28, 0x12	; 18
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	9a 8b       	std	Y+18, r25	; 0x12
    26d2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26d4:	89 89       	ldd	r24, Y+17	; 0x11
    26d6:	9a 89       	ldd	r25, Y+18	; 0x12
    26d8:	9e 01       	movw	r18, r28
    26da:	2f 5f       	subi	r18, 0xFF	; 255
    26dc:	3f 4f       	sbci	r19, 0xFF	; 255
    26de:	b9 01       	movw	r22, r18
    26e0:	4a e0       	ldi	r20, 0x0A	; 10
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	0e 94 10 16 	call	0x2c20	; 0x2c20 <itoa>
   LCD_displayString(buff); /* Display the string */
    26e8:	ce 01       	movw	r24, r28
    26ea:	01 96       	adiw	r24, 0x01	; 1
    26ec:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_displayString>
}
    26f0:	62 96       	adiw	r28, 0x12	; 18
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>
}
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <__vector_9>:
#include "std_types.h"
static volatile void(*g_callBackPtr)(void)=NULL_PTR;
static volatile uint8 g_initialTimerValue;

/*Timer overflow ISR*/
ISR(TIMER0_OVF_vect){
    2716:	1f 92       	push	r1
    2718:	0f 92       	push	r0
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	0f 92       	push	r0
    271e:	11 24       	eor	r1, r1
    2720:	2f 93       	push	r18
    2722:	3f 93       	push	r19
    2724:	4f 93       	push	r20
    2726:	5f 93       	push	r21
    2728:	6f 93       	push	r22
    272a:	7f 93       	push	r23
    272c:	8f 93       	push	r24
    272e:	9f 93       	push	r25
    2730:	af 93       	push	r26
    2732:	bf 93       	push	r27
    2734:	ef 93       	push	r30
    2736:	ff 93       	push	r31
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
	TCNT0=g_initialTimerValue;
    2740:	e2 e5       	ldi	r30, 0x52	; 82
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 91 44 01 	lds	r24, 0x0144
    2748:	80 83       	st	Z, r24
	if(g_callBackPtr!=NULL_PTR){
    274a:	80 91 42 01 	lds	r24, 0x0142
    274e:	90 91 43 01 	lds	r25, 0x0143
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	29 f0       	breq	.+10     	; 0x2760 <__vector_9+0x4a>
		(*g_callBackPtr)();
    2756:	e0 91 42 01 	lds	r30, 0x0142
    275a:	f0 91 43 01 	lds	r31, 0x0143
    275e:	09 95       	icall
	}
}
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	ff 91       	pop	r31
    2766:	ef 91       	pop	r30
    2768:	bf 91       	pop	r27
    276a:	af 91       	pop	r26
    276c:	9f 91       	pop	r25
    276e:	8f 91       	pop	r24
    2770:	7f 91       	pop	r23
    2772:	6f 91       	pop	r22
    2774:	5f 91       	pop	r21
    2776:	4f 91       	pop	r20
    2778:	3f 91       	pop	r19
    277a:	2f 91       	pop	r18
    277c:	0f 90       	pop	r0
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	0f 90       	pop	r0
    2782:	1f 90       	pop	r1
    2784:	18 95       	reti

00002786 <__vector_19>:

/*Timer Compare Mode ISR*/
ISR(TIMER0_COMP_vect){
    2786:	1f 92       	push	r1
    2788:	0f 92       	push	r0
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	0f 92       	push	r0
    278e:	11 24       	eor	r1, r1
    2790:	2f 93       	push	r18
    2792:	3f 93       	push	r19
    2794:	4f 93       	push	r20
    2796:	5f 93       	push	r21
    2798:	6f 93       	push	r22
    279a:	7f 93       	push	r23
    279c:	8f 93       	push	r24
    279e:	9f 93       	push	r25
    27a0:	af 93       	push	r26
    27a2:	bf 93       	push	r27
    27a4:	ef 93       	push	r30
    27a6:	ff 93       	push	r31
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
	TCNT0=g_initialTimerValue;
    27b0:	e2 e5       	ldi	r30, 0x52	; 82
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 91 44 01 	lds	r24, 0x0144
    27b8:	80 83       	st	Z, r24
	if(g_callBackPtr!=NULL_PTR){
    27ba:	80 91 42 01 	lds	r24, 0x0142
    27be:	90 91 43 01 	lds	r25, 0x0143
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	29 f0       	breq	.+10     	; 0x27d0 <__vector_19+0x4a>
		(*g_callBackPtr)();
    27c6:	e0 91 42 01 	lds	r30, 0x0142
    27ca:	f0 91 43 01 	lds	r31, 0x0143
    27ce:	09 95       	icall
	}
}
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	ff 91       	pop	r31
    27d6:	ef 91       	pop	r30
    27d8:	bf 91       	pop	r27
    27da:	af 91       	pop	r26
    27dc:	9f 91       	pop	r25
    27de:	8f 91       	pop	r24
    27e0:	7f 91       	pop	r23
    27e2:	6f 91       	pop	r22
    27e4:	5f 91       	pop	r21
    27e6:	4f 91       	pop	r20
    27e8:	3f 91       	pop	r19
    27ea:	2f 91       	pop	r18
    27ec:	0f 90       	pop	r0
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	0f 90       	pop	r0
    27f2:	1f 90       	pop	r1
    27f4:	18 95       	reti

000027f6 <Timer0_init>:

/*Function Responsible for Initializing timer module according to Required mode and Passed structure*/
void Timer0_init(const Timer0_ConfigType *ConfigPtr ){
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <Timer0_init+0x6>
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	89 83       	std	Y+1, r24	; 0x01
	/*Set initial Value of  Counter*/
	TCNT0=ConfigPtr->initialValue;
    2804:	a2 e5       	ldi	r26, 0x52	; 82
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e9 81       	ldd	r30, Y+1	; 0x01
    280a:	fa 81       	ldd	r31, Y+2	; 0x02
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	8c 93       	st	X, r24
	g_initialTimerValue=ConfigPtr->initialValue;
    2810:	e9 81       	ldd	r30, Y+1	; 0x01
    2812:	fa 81       	ldd	r31, Y+2	; 0x02
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	80 93 44 01 	sts	0x0144, r24
	/*Set prescaler for Timer and Applying Non PWM mode*/
	TCCR0|=(1<<FOC0)|(ConfigPtr->preScaler);
    281a:	a3 e5       	ldi	r26, 0x53	; 83
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e3 e5       	ldi	r30, 0x53	; 83
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	90 81       	ld	r25, Z
    2824:	e9 81       	ldd	r30, Y+1	; 0x01
    2826:	fa 81       	ldd	r31, Y+2	; 0x02
    2828:	81 81       	ldd	r24, Z+1	; 0x01
    282a:	89 2b       	or	r24, r25
    282c:	80 68       	ori	r24, 0x80	; 128
    282e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,WGM00);
    2830:	a3 e5       	ldi	r26, 0x53	; 83
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e3 e5       	ldi	r30, 0x53	; 83
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	8f 7b       	andi	r24, 0xBF	; 191
    283c:	8c 93       	st	X, r24
	/*Case of Normal mode(Overflow)*/
	if(ConfigPtr->mode==NORMAL){
    283e:	e9 81       	ldd	r30, Y+1	; 0x01
    2840:	fa 81       	ldd	r31, Y+2	; 0x02
    2842:	80 81       	ld	r24, Z
    2844:	88 23       	and	r24, r24
    2846:	79 f4       	brne	.+30     	; 0x2866 <Timer0_init+0x70>
		CLEAR_BIT(TCCR0,WGM01);
    2848:	a3 e5       	ldi	r26, 0x53	; 83
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e3 e5       	ldi	r30, 0x53	; 83
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	87 7f       	andi	r24, 0xF7	; 247
    2854:	8c 93       	st	X, r24
		/*Enabling Overflow Interrupt enable*/
		SET_BIT(TIMSK,TOIE0);
    2856:	a9 e5       	ldi	r26, 0x59	; 89
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e9 e5       	ldi	r30, 0x59	; 89
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	81 60       	ori	r24, 0x01	; 1
    2862:	8c 93       	st	X, r24
    2864:	14 c0       	rjmp	.+40     	; 0x288e <Timer0_init+0x98>
	}
	/*In case of Compare mode*/
	else{
		/*Setting Compare Value to value in passed Structure*/
		OCR0=ConfigPtr->compareValue;
    2866:	ac e5       	ldi	r26, 0x5C	; 92
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e9 81       	ldd	r30, Y+1	; 0x01
    286c:	fa 81       	ldd	r31, Y+2	; 0x02
    286e:	83 81       	ldd	r24, Z+3	; 0x03
    2870:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    2872:	a3 e5       	ldi	r26, 0x53	; 83
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	e3 e5       	ldi	r30, 0x53	; 83
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	88 60       	ori	r24, 0x08	; 8
    287e:	8c 93       	st	X, r24
		/*Enabling Output compare match Interrupt Enable*/
		SET_BIT(TIMSK,OCIE0);
    2880:	a9 e5       	ldi	r26, 0x59	; 89
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e9 e5       	ldi	r30, 0x59	; 89
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	82 60       	ori	r24, 0x02	; 2
    288c:	8c 93       	st	X, r24
	}
}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <Timer0_Deinit>:
/*Function Responsible To disable Timer after each Mode*/
void Timer0_Deinit(){
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    28a0:	e3 e5       	ldi	r30, 0x53	; 83
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    28a6:	a9 e5       	ldi	r26, 0x59	; 89
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e9 e5       	ldi	r30, 0x59	; 89
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	8d 7f       	andi	r24, 0xFD	; 253
    28b2:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    28b4:	a9 e5       	ldi	r26, 0x59	; 89
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e9 e5       	ldi	r30, 0x59	; 89
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	8e 7f       	andi	r24, 0xFE	; 254
    28c0:	8c 93       	st	X, r24
}
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <Timer0_setCallBack>:
/*Function used to Set Call Back Function according to passed function*/
void Timer0_setCallBack(void(*a_ptr)(void)){
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <Timer0_setCallBack+0x6>
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	90 93 43 01 	sts	0x0143, r25
    28de:	80 93 42 01 	sts	0x0142, r24
}
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *ConfigPtr)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <UART_init+0x6>
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <UART_init+0x8>
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	9c 83       	std	Y+4, r25	; 0x04
    28fa:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    28fc:	1a 82       	std	Y+2, r1	; 0x02
    28fe:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2900:	eb e2       	ldi	r30, 0x2B	; 43
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2908:	ea e2       	ldi	r30, 0x2A	; 42
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	88 e1       	ldi	r24, 0x18	; 24
    290e:	80 83       	st	Z, r24
	 * UPM1:0  = Configured by passed ConfigPtr
	 * USBS    = Configured by passed ConfigPtr
	 * UCSZ1:0 = Configured by passed ConfigPtr
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (((ConfigPtr->size)&0x03)<<UCSZ1) |((ConfigPtr->parity)<<UPM1)|((ConfigPtr->stop)<<USBS);
    2910:	a0 e4       	ldi	r26, 0x40	; 64
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	eb 81       	ldd	r30, Y+3	; 0x03
    2916:	fc 81       	ldd	r31, Y+4	; 0x04
    2918:	86 81       	ldd	r24, Z+6	; 0x06
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	83 70       	andi	r24, 0x03	; 3
    2920:	90 70       	andi	r25, 0x00	; 0
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	28 2f       	mov	r18, r24
    292c:	20 68       	ori	r18, 0x80	; 128
    292e:	eb 81       	ldd	r30, Y+3	; 0x03
    2930:	fc 81       	ldd	r31, Y+4	; 0x04
    2932:	84 81       	ldd	r24, Z+4	; 0x04
    2934:	88 2f       	mov	r24, r24
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	82 95       	swap	r24
    293e:	92 95       	swap	r25
    2940:	90 7f       	andi	r25, 0xF0	; 240
    2942:	98 27       	eor	r25, r24
    2944:	80 7f       	andi	r24, 0xF0	; 240
    2946:	98 27       	eor	r25, r24
    2948:	28 2b       	or	r18, r24
    294a:	eb 81       	ldd	r30, Y+3	; 0x03
    294c:	fc 81       	ldd	r31, Y+4	; 0x04
    294e:	85 81       	ldd	r24, Z+5	; 0x05
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	82 2b       	or	r24, r18
    2962:	8c 93       	st	X, r24
	if(ConfigPtr->size==NINE){
    2964:	eb 81       	ldd	r30, Y+3	; 0x03
    2966:	fc 81       	ldd	r31, Y+4	; 0x04
    2968:	86 81       	ldd	r24, Z+6	; 0x06
    296a:	87 30       	cpi	r24, 0x07	; 7
    296c:	59 f4       	brne	.+22     	; 0x2984 <UART_init+0x98>
		SET_BIT(UCSRB,UCSZ2);
    296e:	aa e2       	ldi	r26, 0x2A	; 42
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	ea e2       	ldi	r30, 0x2A	; 42
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	84 60       	ori	r24, 0x04	; 4
    297a:	8c 93       	st	X, r24
		/*flag used to help with send and receive functions as we must write and read from 9th bit first in case of 9bit data in frame*/
		g_D9flag=1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	80 93 45 01 	sts	0x0145, r24
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <UART_init+0x9c>
	}
	else{
		g_D9flag=0;
    2984:	10 92 45 01 	sts	0x0145, r1
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((ConfigPtr->baud_rate) * 8UL))) - 1);
    2988:	eb 81       	ldd	r30, Y+3	; 0x03
    298a:	fc 81       	ldd	r31, Y+4	; 0x04
    298c:	80 81       	ld	r24, Z
    298e:	91 81       	ldd	r25, Z+1	; 0x01
    2990:	a2 81       	ldd	r26, Z+2	; 0x02
    2992:	b3 81       	ldd	r27, Z+3	; 0x03
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	aa 1f       	adc	r26, r26
    299a:	bb 1f       	adc	r27, r27
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	aa 1f       	adc	r26, r26
    29a2:	bb 1f       	adc	r27, r27
    29a4:	88 0f       	add	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	aa 1f       	adc	r26, r26
    29aa:	bb 1f       	adc	r27, r27
    29ac:	9c 01       	movw	r18, r24
    29ae:	ad 01       	movw	r20, r26
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	92 e1       	ldi	r25, 0x12	; 18
    29b4:	aa e7       	ldi	r26, 0x7A	; 122
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__udivmodsi4>
    29c0:	da 01       	movw	r26, r20
    29c2:	c9 01       	movw	r24, r18
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    29ca:	e0 e4       	ldi	r30, 0x40	; 64
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	89 2f       	mov	r24, r25
    29d4:	99 27       	eor	r25, r25
    29d6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    29d8:	e9 e2       	ldi	r30, 0x29	; 41
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	80 83       	st	Z, r24
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <UART_sendByte>:
 * Description :
 * Functional responsible for send byte to another UART device.
 */
/*changed input from uint8 to uint16 to support 9 bits mode*/
void UART_sendByte(const uint16 data)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <UART_sendByte+0x6>
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    29fc:	eb e2       	ldi	r30, 0x2B	; 43
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	80 72       	andi	r24, 0x20	; 32
    2a08:	90 70       	andi	r25, 0x00	; 0
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	b9 f3       	breq	.-18     	; 0x29fc <UART_sendByte+0xe>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	if(g_D9flag){
    2a0e:	80 91 45 01 	lds	r24, 0x0145
    2a12:	88 23       	and	r24, r24
    2a14:	41 f0       	breq	.+16     	; 0x2a26 <UART_sendByte+0x38>
		UCSRB|=(data>>TXB8);/*Put the 9th bit in TXB8 before UDR*/
    2a16:	aa e2       	ldi	r26, 0x2A	; 42
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	ea e2       	ldi	r30, 0x2A	; 42
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	90 81       	ld	r25, Z
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	89 2b       	or	r24, r25
    2a24:	8c 93       	st	X, r24
	}
	UDR = data;
    2a26:	ec e2       	ldi	r30, 0x2C	; 44
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint16 UART_recieveByte(void)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <UART_recieveByte+0x6>
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a42:	eb e2       	ldi	r30, 0x2B	; 43
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	88 23       	and	r24, r24
    2a4a:	dc f7       	brge	.-10     	; 0x2a42 <UART_recieveByte+0xa>
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	/*In case of 9 bit data mode*/
	if(g_D9flag){
    2a4c:	80 91 45 01 	lds	r24, 0x0145
    2a50:	88 23       	and	r24, r24
    2a52:	89 f0       	breq	.+34     	; 0x2a76 <UART_recieveByte+0x3e>
		return (UDR|(UCSRB&(1<<RXB8)));
    2a54:	ec e2       	ldi	r30, 0x2C	; 44
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	ea e2       	ldi	r30, 0x2A	; 42
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	88 2f       	mov	r24, r24
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	82 70       	andi	r24, 0x02	; 2
    2a6a:	90 70       	andi	r25, 0x00	; 0
    2a6c:	82 2b       	or	r24, r18
    2a6e:	93 2b       	or	r25, r19
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	07 c0       	rjmp	.+14     	; 0x2a84 <UART_recieveByte+0x4c>
	}
    return UDR;		
    2a76:	ec e2       	ldi	r30, 0x2C	; 44
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	3a 83       	std	Y+2, r19	; 0x02
    2a82:	29 83       	std	Y+1, r18	; 0x01
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <UART_sendString+0x6>
    2a98:	0f 92       	push	r0
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	9b 83       	std	Y+3, r25	; 0x03
    2aa0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aa2:	19 82       	std	Y+1, r1	; 0x01
    2aa4:	10 c0       	rjmp	.+32     	; 0x2ac6 <UART_sendString+0x34>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	28 2f       	mov	r18, r24
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	e2 0f       	add	r30, r18
    2ab4:	f3 1f       	adc	r31, r19
    2ab6:	80 81       	ld	r24, Z
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 f7 14 	call	0x29ee	; 0x29ee <UART_sendByte>
		i++;
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	8f 5f       	subi	r24, 0xFF	; 255
    2ac4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	e2 0f       	add	r30, r18
    2ad4:	f3 1f       	adc	r31, r19
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 23       	and	r24, r24
    2ada:	29 f7       	brne	.-54     	; 0x2aa6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <UART_receiveString+0xa>
    2af2:	0f 92       	push	r0
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	9b 83       	std	Y+3, r25	; 0x03
    2afa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2afc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	8c 01       	movw	r16, r24
    2b0a:	02 0f       	add	r16, r18
    2b0c:	13 1f       	adc	r17, r19
    2b0e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_recieveByte>
    2b12:	f8 01       	movw	r30, r16
    2b14:	80 83       	st	Z, r24
    2b16:	0f c0       	rjmp	.+30     	; 0x2b36 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	8f 5f       	subi	r24, 0xFF	; 255
    2b1c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	9b 81       	ldd	r25, Y+3	; 0x03
    2b28:	8c 01       	movw	r16, r24
    2b2a:	02 0f       	add	r16, r18
    2b2c:	13 1f       	adc	r17, r19
    2b2e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_recieveByte>
    2b32:	f8 01       	movw	r30, r16
    2b34:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b40:	fc 01       	movw	r30, r24
    2b42:	e2 0f       	add	r30, r18
    2b44:	f3 1f       	adc	r31, r19
    2b46:	80 81       	ld	r24, Z
    2b48:	83 32       	cpi	r24, 0x23	; 35
    2b4a:	31 f7       	brne	.-52     	; 0x2b18 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	9b 81       	ldd	r25, Y+3	; 0x03
    2b56:	fc 01       	movw	r30, r24
    2b58:	e2 0f       	add	r30, r18
    2b5a:	f3 1f       	adc	r31, r19
    2b5c:	10 82       	st	Z, r1
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	1f 91       	pop	r17
    2b6a:	0f 91       	pop	r16
    2b6c:	08 95       	ret

00002b6e <__udivmodsi4>:
    2b6e:	a1 e2       	ldi	r26, 0x21	; 33
    2b70:	1a 2e       	mov	r1, r26
    2b72:	aa 1b       	sub	r26, r26
    2b74:	bb 1b       	sub	r27, r27
    2b76:	fd 01       	movw	r30, r26
    2b78:	0d c0       	rjmp	.+26     	; 0x2b94 <__udivmodsi4_ep>

00002b7a <__udivmodsi4_loop>:
    2b7a:	aa 1f       	adc	r26, r26
    2b7c:	bb 1f       	adc	r27, r27
    2b7e:	ee 1f       	adc	r30, r30
    2b80:	ff 1f       	adc	r31, r31
    2b82:	a2 17       	cp	r26, r18
    2b84:	b3 07       	cpc	r27, r19
    2b86:	e4 07       	cpc	r30, r20
    2b88:	f5 07       	cpc	r31, r21
    2b8a:	20 f0       	brcs	.+8      	; 0x2b94 <__udivmodsi4_ep>
    2b8c:	a2 1b       	sub	r26, r18
    2b8e:	b3 0b       	sbc	r27, r19
    2b90:	e4 0b       	sbc	r30, r20
    2b92:	f5 0b       	sbc	r31, r21

00002b94 <__udivmodsi4_ep>:
    2b94:	66 1f       	adc	r22, r22
    2b96:	77 1f       	adc	r23, r23
    2b98:	88 1f       	adc	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	1a 94       	dec	r1
    2b9e:	69 f7       	brne	.-38     	; 0x2b7a <__udivmodsi4_loop>
    2ba0:	60 95       	com	r22
    2ba2:	70 95       	com	r23
    2ba4:	80 95       	com	r24
    2ba6:	90 95       	com	r25
    2ba8:	9b 01       	movw	r18, r22
    2baa:	ac 01       	movw	r20, r24
    2bac:	bd 01       	movw	r22, r26
    2bae:	cf 01       	movw	r24, r30
    2bb0:	08 95       	ret

00002bb2 <__prologue_saves__>:
    2bb2:	2f 92       	push	r2
    2bb4:	3f 92       	push	r3
    2bb6:	4f 92       	push	r4
    2bb8:	5f 92       	push	r5
    2bba:	6f 92       	push	r6
    2bbc:	7f 92       	push	r7
    2bbe:	8f 92       	push	r8
    2bc0:	9f 92       	push	r9
    2bc2:	af 92       	push	r10
    2bc4:	bf 92       	push	r11
    2bc6:	cf 92       	push	r12
    2bc8:	df 92       	push	r13
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	ca 1b       	sub	r28, r26
    2bdc:	db 0b       	sbc	r29, r27
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	09 94       	ijmp

00002bea <__epilogue_restores__>:
    2bea:	2a 88       	ldd	r2, Y+18	; 0x12
    2bec:	39 88       	ldd	r3, Y+17	; 0x11
    2bee:	48 88       	ldd	r4, Y+16	; 0x10
    2bf0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bf2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bf4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bf6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bf8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bfc:	b9 84       	ldd	r11, Y+9	; 0x09
    2bfe:	c8 84       	ldd	r12, Y+8	; 0x08
    2c00:	df 80       	ldd	r13, Y+7	; 0x07
    2c02:	ee 80       	ldd	r14, Y+6	; 0x06
    2c04:	fd 80       	ldd	r15, Y+5	; 0x05
    2c06:	0c 81       	ldd	r16, Y+4	; 0x04
    2c08:	1b 81       	ldd	r17, Y+3	; 0x03
    2c0a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c0c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c0e:	ce 0f       	add	r28, r30
    2c10:	d1 1d       	adc	r29, r1
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	ed 01       	movw	r28, r26
    2c1e:	08 95       	ret

00002c20 <itoa>:
    2c20:	fb 01       	movw	r30, r22
    2c22:	9f 01       	movw	r18, r30
    2c24:	e8 94       	clt
    2c26:	42 30       	cpi	r20, 0x02	; 2
    2c28:	c4 f0       	brlt	.+48     	; 0x2c5a <itoa+0x3a>
    2c2a:	45 32       	cpi	r20, 0x25	; 37
    2c2c:	b4 f4       	brge	.+44     	; 0x2c5a <itoa+0x3a>
    2c2e:	4a 30       	cpi	r20, 0x0A	; 10
    2c30:	29 f4       	brne	.+10     	; 0x2c3c <itoa+0x1c>
    2c32:	97 fb       	bst	r25, 7
    2c34:	1e f4       	brtc	.+6      	; 0x2c3c <itoa+0x1c>
    2c36:	90 95       	com	r25
    2c38:	81 95       	neg	r24
    2c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3c:	64 2f       	mov	r22, r20
    2c3e:	77 27       	eor	r23, r23
    2c40:	0e 94 41 16 	call	0x2c82	; 0x2c82 <__udivmodhi4>
    2c44:	80 5d       	subi	r24, 0xD0	; 208
    2c46:	8a 33       	cpi	r24, 0x3A	; 58
    2c48:	0c f0       	brlt	.+2      	; 0x2c4c <itoa+0x2c>
    2c4a:	89 5d       	subi	r24, 0xD9	; 217
    2c4c:	81 93       	st	Z+, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	a1 f7       	brne	.-24     	; 0x2c3c <itoa+0x1c>
    2c54:	16 f4       	brtc	.+4      	; 0x2c5a <itoa+0x3a>
    2c56:	5d e2       	ldi	r21, 0x2D	; 45
    2c58:	51 93       	st	Z+, r21
    2c5a:	10 82       	st	Z, r1
    2c5c:	c9 01       	movw	r24, r18
    2c5e:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <strrev>

00002c62 <strrev>:
    2c62:	dc 01       	movw	r26, r24
    2c64:	fc 01       	movw	r30, r24
    2c66:	67 2f       	mov	r22, r23
    2c68:	71 91       	ld	r23, Z+
    2c6a:	77 23       	and	r23, r23
    2c6c:	e1 f7       	brne	.-8      	; 0x2c66 <strrev+0x4>
    2c6e:	32 97       	sbiw	r30, 0x02	; 2
    2c70:	04 c0       	rjmp	.+8      	; 0x2c7a <strrev+0x18>
    2c72:	7c 91       	ld	r23, X
    2c74:	6d 93       	st	X+, r22
    2c76:	70 83       	st	Z, r23
    2c78:	62 91       	ld	r22, -Z
    2c7a:	ae 17       	cp	r26, r30
    2c7c:	bf 07       	cpc	r27, r31
    2c7e:	c8 f3       	brcs	.-14     	; 0x2c72 <strrev+0x10>
    2c80:	08 95       	ret

00002c82 <__udivmodhi4>:
    2c82:	aa 1b       	sub	r26, r26
    2c84:	bb 1b       	sub	r27, r27
    2c86:	51 e1       	ldi	r21, 0x11	; 17
    2c88:	07 c0       	rjmp	.+14     	; 0x2c98 <__udivmodhi4_ep>

00002c8a <__udivmodhi4_loop>:
    2c8a:	aa 1f       	adc	r26, r26
    2c8c:	bb 1f       	adc	r27, r27
    2c8e:	a6 17       	cp	r26, r22
    2c90:	b7 07       	cpc	r27, r23
    2c92:	10 f0       	brcs	.+4      	; 0x2c98 <__udivmodhi4_ep>
    2c94:	a6 1b       	sub	r26, r22
    2c96:	b7 0b       	sbc	r27, r23

00002c98 <__udivmodhi4_ep>:
    2c98:	88 1f       	adc	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	5a 95       	dec	r21
    2c9e:	a9 f7       	brne	.-22     	; 0x2c8a <__udivmodhi4_loop>
    2ca0:	80 95       	com	r24
    2ca2:	90 95       	com	r25
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	08 95       	ret

00002caa <_exit>:
    2caa:	f8 94       	cli

00002cac <__stop_program>:
    2cac:	ff cf       	rjmp	.-2      	; 0x2cac <__stop_program>
